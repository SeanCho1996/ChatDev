{"task_id": "000", "ori_task_id": 2, "prompt": "Write a function to find the shared elements from the given two lists.\nThe function signature is: similar_elements(test_tup1, test_tup2)\n", "entry_point": "similar_elements", "test": "\ndef check(candidate):\n    assert set(candidate((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n    assert set(candidate((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))\n    assert set(candidate((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))\n"}
{"task_id": "001", "ori_task_id": 3, "prompt": "Write a python function to identify non-prime numbers.\nThe function signature is: is_not_prime(n)\n", "entry_point": "is_not_prime", "test": "\ndef check(candidate):\n    assert candidate(2) == False\n    assert candidate(10) == True\n    assert candidate(35) == True\n    assert candidate(37) == False\n"}
{"task_id": "002", "ori_task_id": 4, "prompt": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nThe function signature is: heap_queue_largest(nums,n)\n", "entry_point": "heap_queue_largest", "test": "\ndef check(candidate):\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\n    assert candidate( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n"}
{"task_id": "003", "ori_task_id": 6, "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\nThe function signature is: differ_At_One_Bit_Pos(a,b)\n", "entry_point": "differ_At_One_Bit_Pos", "test": "\ndef check(candidate):\n    assert candidate(13,9) == True\n    assert candidate(15,8) == False\n    assert candidate(2,4) == False\n    assert candidate(2, 3) == True\n    assert candidate(5, 1) == True\n    assert candidate(1, 5) == True\n"}
{"task_id": "004", "ori_task_id": 7, "prompt": "Write a function to find all words which are at least 4 characters long in a string.\nThe function signature is: find_char_long(text)\n", "entry_point": "find_char_long", "test": "\ndef check(candidate):\n    assert set(candidate('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n    assert set(candidate('Jing Eco and Tech')) == set(['Jing', 'Tech'])\n    assert set(candidate('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])\n"}
{"task_id": "005", "ori_task_id": 8, "prompt": "Write a function to find squares of individual elements in a list.\nThe function signature is: square_nums(nums)\n", "entry_point": "square_nums", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30])==([100,400,900])\n    assert candidate([12,15])==([144,225])\n"}
{"task_id": "006", "ori_task_id": 9, "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nThe function signature is: find_Rotations(str)\n", "entry_point": "find_Rotations", "test": "\ndef check(candidate):\n    assert candidate(\"aaaa\") == 1\n    assert candidate(\"ab\") == 2\n    assert candidate(\"abc\") == 3\n"}
{"task_id": "007", "ori_task_id": 11, "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\nThe function signature is: remove_Occ(s,ch)\n", "entry_point": "remove_Occ", "test": "\ndef check(candidate):\n    assert candidate(\"hello\",\"l\") == \"heo\"\n    assert candidate(\"abcda\",\"a\") == \"bcd\"\n    assert candidate(\"PHP\",\"P\") == \"H\"\n"}
{"task_id": "008", "ori_task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\nThe function signature is: sort_matrix(M)\n", "entry_point": "sort_matrix", "test": "\ndef check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n"}
{"task_id": "009", "ori_task_id": 14, "prompt": "Write a python function to find the volume of a triangular prism.\nThe function signature is: find_Volume(l,b,h) \n", "entry_point": "find_Volume", "test": "\ndef check(candidate):\n    assert candidate(10,8,6) == 240\n    assert candidate(3,2,2) == 6\n    assert candidate(1,2,1) == 1\n"}
{"task_id": "010", "ori_task_id": 16, "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nThe function signature is: text_lowercase_underscore(text)\n", "entry_point": "text_lowercase_underscore", "test": "\ndef check(candidate):\n    assert candidate(\"aab_cbbbc\")==(True)\n    assert candidate(\"aab_Abbbc\")==(False)\n    assert candidate(\"Aaab_abbbc\")==(False)\n"}
{"task_id": "011", "ori_task_id": 17, "prompt": "Write a function that returns the perimeter of a square given its side length as input.\nThe function signature is: square_perimeter(a)\n", "entry_point": "square_perimeter", "test": "\ndef check(candidate):\n    assert candidate(10)==40\n    assert candidate(5)==20\n    assert candidate(4)==16\n"}
{"task_id": "012", "ori_task_id": 18, "prompt": "Write a function to remove characters from the first string which are present in the second string.\nThe function signature is: remove_dirty_chars(string, second_string)\n", "entry_point": "remove_dirty_chars", "test": "\ndef check(candidate):\n    assert candidate(\"probasscurve\", \"pros\") == 'bacuve'\n    assert candidate(\"digitalindia\", \"talent\") == 'digiidi'\n    assert candidate(\"exoticmiles\", \"toxic\") == 'emles'\n"}
{"task_id": "013", "ori_task_id": 19, "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\nThe function signature is: test_duplicate(arraynums)\n", "entry_point": "test_duplicate", "test": "\ndef check(candidate):\n    assert candidate(([1,2,3,4,5]))==False\n    assert candidate(([1,2,3,4, 4]))==True\n    assert candidate([1,1,2,2,3,3,4,4,5])==True\n"}
{"task_id": "014", "ori_task_id": 20, "prompt": "Write a function to check if the given number is woodball or not.\nThe function signature is: is_woodall(x)\n", "entry_point": "is_woodall", "test": "\ndef check(candidate):\n    assert candidate(383) == True\n    assert candidate(254) == False\n    assert candidate(200) == False\n"}
{"task_id": "015", "ori_task_id": 56, "prompt": "Write a python function to check if a given number is one less than twice its reverse.\nThe function signature is: check(n)\n", "entry_point": "check", "test": "\ndef check(candidate):\n    assert candidate(70) == False\n    assert candidate(23) == False\n    assert candidate(73) == True\n"}
{"task_id": "016", "ori_task_id": 57, "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.\nThe function signature is: find_Max_Num(arr) \n", "entry_point": "find_Max_Num", "test": "\ndef check(candidate):\n    assert candidate([1,2,3]) == 321\n    assert candidate([4,5,6,1]) == 6541\n    assert candidate([1,2,3,9]) == 9321\n"}
{"task_id": "017", "ori_task_id": 58, "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\nThe function signature is: opposite_Signs(x,y)\n", "entry_point": "opposite_Signs", "test": "\ndef check(candidate):\n    assert candidate(1,-2) == True\n    assert candidate(3,2) == False\n    assert candidate(-10,-10) == False\n    assert candidate(-2,2) == True\n"}
{"task_id": "018", "ori_task_id": 59, "prompt": "Write a function to find the nth octagonal number.\nThe function signature is: is_octagonal(n)\n", "entry_point": "is_octagonal", "test": "\ndef check(candidate):\n    assert candidate(5) == 65\n    assert candidate(10) == 280\n    assert candidate(15) == 645\n"}
{"task_id": "019", "ori_task_id": 61, "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.\nThe function signature is: count_Substrings(s)\n", "entry_point": "count_Substrings", "test": "\ndef check(candidate):\n    assert candidate('112112') == 6\n    assert candidate('111') == 6\n    assert candidate('1101112') == 12\n"}
{"task_id": "020", "ori_task_id": 62, "prompt": "Write a python function to find smallest number in a list.\nThe function signature is: smallest_num(xs)\n", "entry_point": "smallest_num", "test": "\ndef check(candidate):\n    assert candidate([10, 20, 1, 45, 99]) == 1\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([45, 46, 50, 60]) == 45\n"}
{"task_id": "021", "ori_task_id": 63, "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\nThe function signature is: max_difference(test_list)\n", "entry_point": "max_difference", "test": "\ndef check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n"}
{"task_id": "022", "ori_task_id": 64, "prompt": "Write a function to sort a list of tuples using the second value of each tuple.\nThe function signature is: subject_marks(subjectmarks)\n", "entry_point": "subject_marks", "test": "\ndef check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert candidate([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n"}
{"task_id": "023", "ori_task_id": 65, "prompt": "Write a function to flatten a list and sum all of its elements.\nThe function signature is: recursive_list_sum(data_list)\n", "entry_point": "recursive_list_sum", "test": "\ndef check(candidate):\n    assert candidate(([1, 2, [3,4],[5,6]]))==21\n    assert candidate(([7, 10, [15,14],[19,41]]))==106\n    assert candidate(([10, 20, [30,40],[50,60]]))==210\n"}
{"task_id": "024", "ori_task_id": 66, "prompt": "Write a python function to count the number of positive numbers in a list.\nThe function signature is: pos_count(list)\n", "entry_point": "pos_count", "test": "\ndef check(candidate):\n    assert candidate([1,-2,3,-4]) == 2\n    assert candidate([3,4,5,-1]) == 3\n    assert candidate([1,2,3,4]) == 4\n"}
{"task_id": "025", "ori_task_id": 67, "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.\nThe function signature is: bell_number(n)\n", "entry_point": "bell_number", "test": "\ndef check(candidate):\n    assert candidate(2)==2\n    assert candidate(10)==115975\n    assert candidate(56)==6775685320645824322581483068371419745979053216268760300\n"}
{"task_id": "026", "ori_task_id": 68, "prompt": "Write a python function to check whether the given array is monotonic or not.\nThe function signature is: is_Monotonic(A)\n", "entry_point": "is_Monotonic", "test": "\ndef check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n"}
{"task_id": "027", "ori_task_id": 69, "prompt": "Write a function to check whether a list contains the given sublist or not.\nThe function signature is: is_sublist(l, s)\n", "entry_point": "is_sublist", "test": "\ndef check(candidate):\n    assert candidate([2,4,3,5,7],[3,7])==False\n    assert candidate([2,4,3,5,7],[4,3])==True\n    assert candidate([2,4,3,5,7],[1,6])==False\n"}
{"task_id": "028", "ori_task_id": 70, "prompt": "Write a function to find whether all the given tuples have equal length or not.\nThe function signature is: get_equal(Input)\n", "entry_point": "get_equal", "test": "\ndef check(candidate):\n    assert candidate([(11, 22, 33), (44, 55, 66)]) == True\n    assert candidate([(1, 2, 3), (4, 5, 6, 7)]) == False\n    assert candidate([(1, 2), (3, 4)]) == True\n"}
{"task_id": "029", "ori_task_id": 71, "prompt": "Write a function to sort a list of elements.\nThe function signature is: comb_sort(nums)\n", "entry_point": "comb_sort", "test": "\ndef check(candidate):\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]\n"}
{"task_id": "030", "ori_task_id": 72, "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.\nThe function signature is: dif_Square(n)\n", "entry_point": "dif_Square", "test": "\ndef check(candidate):\n    assert candidate(5) == True\n    assert candidate(10) == False\n    assert candidate(15) == True\n"}
{"task_id": "031", "ori_task_id": 74, "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\nThe function signature is: is_samepatterns(colors, patterns)\n", "entry_point": "is_samepatterns", "test": "\ndef check(candidate):\n    assert candidate([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\n    assert candidate([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False\n"}
{"task_id": "032", "ori_task_id": 75, "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\nThe function signature is: find_tuples(test_list, K)\n", "entry_point": "find_tuples", "test": "\ndef check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n"}
{"task_id": "033", "ori_task_id": 77, "prompt": "Write a python function to find whether a number is divisible by 11.\nThe function signature is: is_Diff(n)\n", "entry_point": "is_Diff", "test": "\ndef check(candidate):\n    assert candidate (12345) == False\n    assert candidate(1212112) == True\n    assert candidate(1212) == False\n"}
{"task_id": "034", "ori_task_id": 79, "prompt": "Write a python function to check whether the length of the word is odd or not.\nThe function signature is: word_len(s)\n", "entry_point": "word_len", "test": "\ndef check(candidate):\n    assert candidate(\"Hadoop\") == False\n    assert candidate(\"great\") == True\n    assert candidate(\"structure\") == True\n"}
{"task_id": "035", "ori_task_id": 80, "prompt": "Write a function to find the nth tetrahedral number.\nThe function signature is: tetrahedral_number(n)\n", "entry_point": "tetrahedral_number", "test": "\ndef check(candidate):\n    assert candidate(5) == 35\n    assert candidate(6) == 56\n    assert candidate(7) == 84\n"}
{"task_id": "036", "ori_task_id": 82, "prompt": "Write a function to find the volume of a sphere.\nThe function signature is: volume_sphere(r)\n", "entry_point": "volume_sphere", "test": "\ndef check(candidate):\n    assert math.isclose(candidate(10), 4188.790204786391, rel_tol=0.001)\n    assert math.isclose(candidate(25), 65449.84694978735, rel_tol=0.001)\n    assert math.isclose(candidate(20), 33510.32163829113, rel_tol=0.001)\n"}
{"task_id": "037", "ori_task_id": 83, "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nThe function signature is: get_Char(strr)\n", "entry_point": "get_Char", "test": "\ndef check(candidate):\n    assert candidate(\"abc\") == \"f\"\n    assert candidate(\"gfg\") == \"t\"\n    assert candidate(\"ab\") == \"c\"\n"}
{"task_id": "038", "ori_task_id": 84, "prompt": "Write a function to find the nth number in the newman conway sequence.\nThe function signature is: sequence(n)\n", "entry_point": "sequence", "test": "\ndef check(candidate):\n    assert candidate(10) == 6\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n"}
{"task_id": "039", "ori_task_id": 85, "prompt": "Write a function to find the surface area of a sphere.\nThe function signature is: surfacearea_sphere(r)\n", "entry_point": "surfacearea_sphere", "test": "\ndef check(candidate):\n    assert math.isclose(candidate(10), 1256.6370614359173, rel_tol=0.001)\n    assert math.isclose(candidate(15), 2827.4333882308138, rel_tol=0.001)\n    assert math.isclose(candidate(20), 5026.548245743669, rel_tol=0.001)\n"}
{"task_id": "040", "ori_task_id": 86, "prompt": "Write a function to find nth centered hexagonal number.\nThe function signature is: centered_hexagonal_number(n)\n", "entry_point": "centered_hexagonal_number", "test": "\ndef check(candidate):\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n"}
{"task_id": "041", "ori_task_id": 87, "prompt": "Write a function to merge three dictionaries into a single dictionary.\nThe function signature is: merge_dictionaries_three(dict1,dict2, dict3)\n", "entry_point": "merge_dictionaries_three", "test": "\ndef check(candidate):\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n"}
{"task_id": "042", "ori_task_id": 88, "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nThe function signature is: freq_count(list1)\n", "entry_point": "freq_count", "test": "\ndef check(candidate):\n    assert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n    assert candidate([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\n    assert candidate([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n"}
{"task_id": "043", "ori_task_id": 89, "prompt": "Write a function to find the closest smaller number than n.\nThe function signature is: closest_num(N)\n", "entry_point": "closest_num", "test": "\ndef check(candidate):\n    assert candidate(11) == 10\n    assert candidate(7) == 6\n    assert candidate(12) == 11\n"}
{"task_id": "044", "ori_task_id": 90, "prompt": "Write a python function to find the length of the longest word.\nThe function signature is: len_log(list1)\n", "entry_point": "len_log", "test": "\ndef check(candidate):\n    assert candidate([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 3\n    assert candidate([\"small\",\"big\",\"tall\"]) == 5\n"}
{"task_id": "045", "ori_task_id": 91, "prompt": "Write a function to check if a string is present as a substring in a given list of string values.\nThe function signature is: find_substring(str1, sub_str)\n", "entry_point": "find_substring", "test": "\ndef check(candidate):\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n"}
{"task_id": "046", "ori_task_id": 92, "prompt": "Write a function to check whether the given number is undulating or not.\nThe function signature is: is_undulating(n)\n", "entry_point": "is_undulating", "test": "\ndef check(candidate):\n    assert candidate(1212121) == True\n    assert candidate(1991) == False\n    assert candidate(121) == True\n"}
{"task_id": "047", "ori_task_id": 93, "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\nThe function signature is: power(a,b)\n", "entry_point": "power", "test": "\ndef check(candidate):\n    assert candidate(3,4) == 81\n    assert candidate(2,3) == 8\n    assert candidate(5,5) == 3125\n"}
{"task_id": "048", "ori_task_id": 94, "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nThe function signature is: index_minimum(test_list)\n", "entry_point": "index_minimum", "test": "\ndef check(candidate):\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n"}
{"task_id": "049", "ori_task_id": 95, "prompt": "Write a python function to find the length of the smallest list in a list of lists.\nThe function signature is: Find_Min_Length(lst)\n", "entry_point": "Find_Min_Length", "test": "\ndef check(candidate):\n    assert candidate([[1],[1,2]]) == 1\n    assert candidate([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert candidate([[3,3,3],[4,4,4,4]]) == 3\n"}
{"task_id": "050", "ori_task_id": 96, "prompt": "Write a python function to find the number of divisors of a given integer.\nThe function signature is: divisor(n)\n", "entry_point": "divisor", "test": "\ndef check(candidate):\n    assert candidate(15) == 4\n    assert candidate(12) == 6\n    assert candidate(9) == 3\n"}
{"task_id": "051", "ori_task_id": 97, "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nThe function signature is: frequency_lists(list1)\n", "entry_point": "frequency_lists", "test": "\ndef check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert candidate([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n"}
{"task_id": "052", "ori_task_id": 98, "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\nThe function signature is: multiply_num(numbers)\n", "entry_point": "multiply_num", "test": "\ndef check(candidate):\n    assert math.isclose(candidate((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n    assert math.isclose(candidate((-10,-20,-30)), -2000.0, rel_tol=0.001)\n    assert math.isclose(candidate((19,15,18)), 1710.0, rel_tol=0.001)\n"}
{"task_id": "053", "ori_task_id": 99, "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nThe function signature is: decimal_to_binary(n)\n", "entry_point": "decimal_to_binary", "test": "\ndef check(candidate):\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111'\n"}
{"task_id": "054", "ori_task_id": 100, "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nThe function signature is: next_smallest_palindrome(num)\n", "entry_point": "next_smallest_palindrome", "test": "\ndef check(candidate):\n    assert candidate(99)==101\n    assert candidate(1221)==1331\n    assert candidate(120)==121\n"}
{"task_id": "055", "ori_task_id": 101, "prompt": "Write a function to find the kth element in the given array using 1-based indexing.\nThe function signature is: kth_element(arr, k)\n", "entry_point": "kth_element", "test": "\ndef check(candidate):\n    assert candidate([12,3,5,7,19], 2) == 3\n    assert candidate([17,24,8,23], 3) == 8\n    assert candidate([16,21,25,36,4], 4) == 36\n"}
{"task_id": "056", "ori_task_id": 102, "prompt": "Write a function to convert a snake case string to camel case string.\nThe function signature is: snake_to_camel(word)\n", "entry_point": "snake_to_camel", "test": "\ndef check(candidate):\n    assert candidate('python_program')=='PythonProgram'\n    assert candidate('python_language')==('PythonLanguage')\n    assert candidate('programming_language')==('ProgrammingLanguage')\n"}
{"task_id": "057", "ori_task_id": 103, "prompt": "Write a function to find the Eulerian number a(n, m).\nThe function signature is: eulerian_num(n, m)\n", "entry_point": "eulerian_num", "test": "\ndef check(candidate):\n    assert candidate(3, 1) == 4\n    assert candidate(4, 1) == 11\n    assert candidate(5, 3) == 26\n"}
{"task_id": "058", "ori_task_id": 104, "prompt": "Write a function to sort each sublist of strings in a given list of lists.\nThe function signature is: sort_sublists(input_list)\n", "entry_point": "sort_sublists", "test": "\ndef check(candidate):\n    assert candidate(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n"}
{"task_id": "059", "ori_task_id": 105, "prompt": "Write a python function to count true booleans in the given list.\nThe function signature is: count(lst)\n", "entry_point": "count", "test": "\ndef check(candidate):\n    assert candidate([True,False,True]) == 2\n    assert candidate([False,False]) == 0\n    assert candidate([True,True,True]) == 3\n"}
{"task_id": "060", "ori_task_id": 106, "prompt": "Write a function to append the given list to the given tuples.\nThe function signature is: add_lists(test_list, test_tup)\n", "entry_point": "add_lists", "test": "\ndef check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n"}
{"task_id": "061", "ori_task_id": 108, "prompt": "Write a function to merge three lists into a single sorted list.\nThe function signature is: merge_sorted_list(num1,num2,num3)\n", "entry_point": "merge_sorted_list", "test": "\ndef check(candidate):\n    assert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n"}
{"task_id": "062", "ori_task_id": 109, "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nThe function signature is: odd_Equivalent(s,n)\n", "entry_point": "odd_Equivalent", "test": "\ndef check(candidate):\n    assert candidate(\"011001\",6) == 3\n    assert candidate(\"11011\",5) == 4\n    assert candidate(\"1010\",4) == 2\n"}
{"task_id": "063", "ori_task_id": 111, "prompt": "Write a function to find the common elements in given nested lists.\nThe function signature is: common_in_nested_lists(nestedlist)\n", "entry_point": "common_in_nested_lists", "test": "\ndef check(candidate):\n    assert set(candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n    assert set(candidate([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\n    assert set(candidate([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])\n"}
{"task_id": "064", "ori_task_id": 113, "prompt": "Write a function to check if a string represents an integer or not.\nThe function signature is: check_integer(text)\n", "entry_point": "check_integer", "test": "\ndef check(candidate):\n    assert candidate(\"python\")==False\n    assert candidate(\"1\")==True\n    assert candidate(\"12345\")==True\n"}
{"task_id": "065", "ori_task_id": 115, "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\nThe function signature is: empty_dit(list1)\n", "entry_point": "empty_dit", "test": "\ndef check(candidate):\n    assert candidate([{},{},{}])==True\n    assert candidate([{1,2},{},{}])==False\n    assert candidate({})==True\n"}
{"task_id": "066", "ori_task_id": 116, "prompt": "Write a function to convert a given tuple of positive integers into a single integer.\nThe function signature is: tuple_to_int(nums)\n", "entry_point": "tuple_to_int", "test": "\ndef check(candidate):\n    assert candidate((1,2,3))==123\n    assert candidate((4,5,6))==456\n    assert candidate((5,6,7))==567\n"}
{"task_id": "067", "ori_task_id": 117, "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.\nThe function signature is: list_to_float(test_list)\n", "entry_point": "list_to_float", "test": "\ndef check(candidate):\n    assert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n    assert candidate( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n    assert candidate( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\n"}
{"task_id": "068", "ori_task_id": 118, "prompt": "Write a function to convert a string to a list of strings split on the space character.\nThe function signature is: string_to_list(string)\n", "entry_point": "string_to_list", "test": "\ndef check(candidate):\n    assert candidate(\"python programming\")==['python','programming']\n    assert candidate(\"lists tuples strings\")==['lists','tuples','strings']\n    assert candidate(\"write a program\")==['write','a','program']\n"}
{"task_id": "069", "ori_task_id": 119, "prompt": "Write a python function to find the element that appears only once in a sorted array.\nThe function signature is: search(arr)\n", "entry_point": "search", "test": "\ndef check(candidate):\n    assert candidate([1,1,2,2,3]) == 3\n    assert candidate([1,1,3,3,4,4,5,5,7,7,8]) == 8\n    assert candidate([1,2,2,3,3,4,4]) == 1\n"}
{"task_id": "070", "ori_task_id": 120, "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nThe function signature is: max_product_tuple(list1)\n", "entry_point": "max_product_tuple", "test": "\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    assert candidate([(10,20), (15,2), (5,10)] )==200\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==484\n"}
{"task_id": "071", "ori_task_id": 123, "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\nThe function signature is: amicable_numbers_sum(limit)\n", "entry_point": "amicable_numbers_sum", "test": "\ndef check(candidate):\n    assert candidate(999)==504\n    assert candidate(9999)==31626\n    assert candidate(99)==0\n"}
{"task_id": "072", "ori_task_id": 124, "prompt": "Write a function to get the angle of a complex number.\nThe function signature is: angle_complex(a,b)\n", "entry_point": "angle_complex", "test": "\ndef check(candidate):\n    assert math.isclose(candidate(0,1j), 1.5707963267948966, rel_tol=0.001)\n    assert math.isclose(candidate(2,1j), 0.4636476090008061, rel_tol=0.001)\n    assert math.isclose(candidate(0,2j), 1.5707963267948966, rel_tol=0.001)\n"}
{"task_id": "073", "ori_task_id": 125, "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nThe function signature is: find_length(string)\n", "entry_point": "find_length", "test": "\ndef check(candidate):\n    assert candidate(\"11000010001\") == 6\n    assert candidate(\"10111\") == 1\n    assert candidate(\"11011101100101\") == 2\n"}
{"task_id": "074", "ori_task_id": 126, "prompt": "Write a python function to find the sum of common divisors of two given numbers.\nThe function signature is: sum(a,b)\n", "entry_point": "sum", "test": "\ndef check(candidate):\n    assert candidate(10,15) == 6\n    assert candidate(100,150) == 93\n    assert candidate(4,6) == 3\n"}
{"task_id": "075", "ori_task_id": 127, "prompt": "Write a function to multiply two integers.\nThe function signature is: multiply_int(x, y)\n", "entry_point": "multiply_int", "test": "\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(5,10)==50\n    assert candidate(4,8)==32\n"}
{"task_id": "076", "ori_task_id": 128, "prompt": "Write a function to find words that are longer than n characters from a given list of words.\nThe function signature is: long_words(n, str)\n", "entry_point": "long_words", "test": "\ndef check(candidate):\n    assert candidate(3,\"python is a programming language\")==['python','programming','language']\n    assert candidate(2,\"writing a program\")==['writing','program']\n    assert candidate(5,\"sorting list\")==['sorting']\n"}
{"task_id": "077", "ori_task_id": 129, "prompt": "Write a function to calculate whether the matrix is a magic square.\nThe function signature is: magic_square_test(my_matrix)\n", "entry_point": "magic_square_test", "test": "\ndef check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n"}
{"task_id": "078", "ori_task_id": 130, "prompt": "Write a function to find the item with maximum frequency in a given list.\nThe function signature is: max_occurrences(nums)\n", "entry_point": "max_occurrences", "test": "\ndef check(candidate):\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n    assert candidate([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\n    assert candidate([10,20,20,30,40,90,80,50,30,20,50,10])==20\n"}
{"task_id": "079", "ori_task_id": 131, "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).\nThe function signature is: reverse_vowels(str1)\n", "entry_point": "reverse_vowels", "test": "\ndef check(candidate):\n    assert candidate(\"Python\") == \"Python\"\n    assert candidate(\"USA\") == \"ASU\"\n    assert candidate(\"ab\") == \"ab\"\n"}
{"task_id": "080", "ori_task_id": 132, "prompt": "Write a function to convert a tuple to a string.\nThe function signature is: tup_string(tup1)\n", "entry_point": "tup_string", "test": "\ndef check(candidate):\n    assert candidate(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    assert candidate(('p','y','t','h','o','n'))==(\"python\")\n    assert candidate(('p','r','o','g','r','a','m'))==(\"program\")\n"}
{"task_id": "081", "ori_task_id": 133, "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.\nThe function signature is: sum_negativenum(nums)\n", "entry_point": "sum_negativenum", "test": "\ndef check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert candidate([10,15,-14,13,-18,12,-20])==-52\n    assert candidate([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n"}
{"task_id": "082", "ori_task_id": 135, "prompt": "Write a function to find the nth hexagonal number.\nThe function signature is: hexagonal_num(n)\n", "entry_point": "hexagonal_num", "test": "\ndef check(candidate):\n    assert candidate(10) == 190\n    assert candidate(5) == 45\n    assert candidate(7) == 91\n"}
{"task_id": "083", "ori_task_id": 137, "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\nThe function signature is: zero_count(nums)\n", "entry_point": "zero_count", "test": "\ndef check(candidate):\n    assert math.isclose(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n    assert math.isclose(candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\n    assert math.isclose(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)\n"}
{"task_id": "084", "ori_task_id": 138, "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nThe function signature is: is_Sum_Of_Powers_Of_Two(n)\n", "entry_point": "is_Sum_Of_Powers_Of_Two", "test": "\ndef check(candidate):\n    assert candidate(10) == True\n    assert candidate(7) == False\n    assert candidate(14) == True\n"}
{"task_id": "085", "ori_task_id": 139, "prompt": "Write a function to find the circumference of a circle.\nThe function signature is: circle_circumference(r)\n", "entry_point": "circle_circumference", "test": "\ndef check(candidate):\n    assert math.isclose(candidate(10), 62.830000000000005, rel_tol=0.001)\n    assert math.isclose(candidate(5), 31.415000000000003, rel_tol=0.001)\n    assert math.isclose(candidate(4), 25.132, rel_tol=0.001)\n"}
{"task_id": "086", "ori_task_id": 140, "prompt": "Write a function to flatten the list of lists into a single set of numbers.\nThe function signature is: extract_singly(test_list)\n", "entry_point": "extract_singly", "test": "\ndef check(candidate):\n    assert set(candidate([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n    assert set(candidate([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])\n    assert set(candidate([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])\n"}
{"task_id": "087", "ori_task_id": 141, "prompt": "Write a function to sort a list of elements.\nThe function signature is: pancake_sort(nums)\n", "entry_point": "pancake_sort", "test": "\ndef check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n"}
{"task_id": "088", "ori_task_id": 142, "prompt": "Write a function to count number items that are identical in the same position of three given lists.\nThe function signature is: count_samepair(list1,list2,list3)\n", "entry_point": "count_samepair", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert candidate([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n"}
{"task_id": "089", "ori_task_id": 143, "prompt": "Write a function to find number of lists present in the given tuple.\nThe function signature is: find_lists(Input)\n", "entry_point": "find_lists", "test": "\ndef check(candidate):\n    assert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    assert candidate(([1, 2], [3, 4], [5, 6]))  == 3\n    assert candidate(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\n"}
{"task_id": "090", "ori_task_id": 145, "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\nThe function signature is: max_Abs_Diff(arr)\n", "entry_point": "max_Abs_Diff", "test": "\ndef check(candidate):\n    assert candidate((2,1,5,3)) == 4\n    assert candidate((9,3,2,5,1)) == 8\n    assert candidate((3,2,1)) == 2\n"}
{"task_id": "091", "ori_task_id": 160, "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nThe function signature is: find_solution(a, b, n)\n", "entry_point": "find_solution", "test": "\ndef check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n"}
{"task_id": "092", "ori_task_id": 161, "prompt": "Write a function to remove all elements from a given list present in another list.\nThe function signature is: remove_elements(list1, list2)\n", "entry_point": "remove_elements", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n"}
{"task_id": "093", "ori_task_id": 162, "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nThe function signature is: sum_series(n)\n", "entry_point": "sum_series", "test": "\ndef check(candidate):\n    assert candidate(6) == 12\n    assert candidate(10) == 30\n    assert candidate(9) == 25\n"}
{"task_id": "094", "ori_task_id": 163, "prompt": "Write a function to calculate the area of a regular polygon given the length and number of its sides.\nThe function signature is: area_polygon(s, l)\n", "entry_point": "area_polygon", "test": "\ndef check(candidate):\n    assert math.isclose(candidate(4, 20), 400., rel_tol=0.001)\n    assert math.isclose(candidate(10, 15), 1731.197, rel_tol=0.001)\n    assert math.isclose(candidate(9, 7), 302.909, rel_tol=0.001)\n"}
{"task_id": "095", "ori_task_id": 164, "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.\nThe function signature is: are_equivalent(num1, num2)\n", "entry_point": "are_equivalent", "test": "\ndef check(candidate):\n    assert candidate(36, 57) == False\n    assert candidate(2, 4) == False\n    assert candidate(23, 47) == True\n"}
{"task_id": "096", "ori_task_id": 165, "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nThe function signature is: count_char_position(str1)\n", "entry_point": "count_char_position", "test": "\ndef check(candidate):\n    assert candidate(\"xbcefg\") == 2\n    assert candidate(\"ABcED\") == 3\n    assert candidate(\"AbgdeF\") == 5\n"}
{"task_id": "097", "ori_task_id": 166, "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.\nThe function signature is: find_even_pair(A)\n", "entry_point": "find_even_pair", "test": "\ndef check(candidate):\n    assert candidate([5, 4, 7, 2, 1]) == 4\n    assert candidate([7, 2, 8, 1, 0, 5, 11]) == 9\n    assert candidate([1, 2, 3]) == 1\n"}
{"task_id": "098", "ori_task_id": 167, "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.\nThe function signature is: next_power_of_2(n)\n", "entry_point": "next_power_of_2", "test": "\ndef check(candidate):\n    assert candidate(0) == 1\n    assert candidate(5) == 8\n    assert candidate(17) == 32\n"}
{"task_id": "099", "ori_task_id": 168, "prompt": "Write a function to count the number of occurrences of a number in a given list.\nThe function signature is: frequency(a,x)\n", "entry_point": "frequency", "test": "\ndef check(candidate):\n    assert candidate([1,2,3], 4) == 0\n    assert candidate([1,2,2,3,3,3,4], 3) == 3\n    assert candidate([0,1,2,3,1,2], 1) == 2\n"}
{"task_id": "100", "ori_task_id": 170, "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.\nThe function signature is: sum_range_list(list1, m, n)\n", "entry_point": "sum_range_list", "test": "\ndef check(candidate):\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n"}
{"task_id": "101", "ori_task_id": 171, "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.\nThe function signature is: perimeter_pentagon(a)\n", "entry_point": "perimeter_pentagon", "test": "\ndef check(candidate):\n    assert candidate(5) == 25\n    assert candidate(10) == 50\n    assert candidate(15) == 75\n"}
{"task_id": "102", "ori_task_id": 172, "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.\nThe function signature is: count_occurance(s)\n", "entry_point": "count_occurance", "test": "\ndef check(candidate):\n    assert candidate(\"letstdlenstdporstd\") == 3\n    assert candidate(\"truststdsolensporsd\") == 1\n    assert candidate(\"makestdsostdworthit\") == 2\n    assert candidate(\"stds\") == 1\n    assert candidate(\"\") == 0\n"}
{"task_id": "103", "ori_task_id": 222, "prompt": "Write a function to check if all the elements in tuple have same data type or not.\nThe function signature is: check_type(test_tuple)\n", "entry_point": "check_type", "test": "\ndef check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6) ) == True\n    assert candidate((1, 2, \"4\") ) == False\n    assert candidate((3, 2, 1, 4, 5) ) == True\n"}
{"task_id": "104", "ori_task_id": 223, "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nThe function signature is: binary_search(arr, low, high, x)\n", "entry_point": "binary_search", "test": "\ndef check(candidate):\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True\n    assert is_majority([1, 1, 2, 2], 5, 1) == False\n"}
{"task_id": "105", "ori_task_id": 224, "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nThe function signature is: count_Set_Bits(n)\n", "entry_point": "count_Set_Bits", "test": "\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 1\n    assert candidate(6) == 2\n"}
{"task_id": "106", "ori_task_id": 226, "prompt": "Write a python function to remove the characters which have odd index values of a given string.\nThe function signature is: odd_values_string(str)\n", "entry_point": "odd_values_string", "test": "\ndef check(candidate):\n    assert candidate('abcdef') == 'ace'\n    assert candidate('python') == 'pto'\n    assert candidate('data') == 'dt'\n    assert candidate('lambs') == 'lms'\n"}
{"task_id": "107", "ori_task_id": 227, "prompt": "Write a function to find minimum of three numbers.\nThe function signature is: min_of_three(a,b,c)\n", "entry_point": "min_of_three", "test": "\ndef check(candidate):\n    assert candidate(10,20,0)==0\n    assert candidate(19,15,18)==15\n    assert candidate(-10,-20,-30)==-30\n"}
{"task_id": "108", "ori_task_id": 228, "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\nThe function signature is: all_Bits_Set_In_The_Given_Range(n,l,r)\n", "entry_point": "all_Bits_Set_In_The_Given_Range", "test": "\ndef check(candidate):\n    assert candidate(4,1,2) == True\n    assert candidate(17,2,4) == True\n    assert candidate(39,4,6) == False\n"}
{"task_id": "109", "ori_task_id": 229, "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nThe function signature is: re_arrange_array(arr, n)\n", "entry_point": "re_arrange_array", "test": "\ndef check(candidate):\n    assert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert candidate([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n    assert candidate([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n"}
{"task_id": "110", "ori_task_id": 230, "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nThe function signature is: replace_blank(str1,char)\n", "entry_point": "replace_blank", "test": "\ndef check(candidate):\n    assert candidate(\"hello people\",'@')==(\"hello@people\")\n    assert candidate(\"python program language\",'$')==(\"python$program$language\")\n    assert candidate(\"blank space\",\"-\")==(\"blank-space\")\n"}
{"task_id": "111", "ori_task_id": 232, "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nThe function signature is: larg_nnum(list1,n)\n", "entry_point": "larg_nnum", "test": "\ndef check(candidate):\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\n    assert set(candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])\n"}
{"task_id": "112", "ori_task_id": 233, "prompt": "Write a function to find the lateral surface area of a cylinder.\nThe function signature is: lateralsuface_cylinder(r,h)\n", "entry_point": "lateralsuface_cylinder", "test": "\ndef check(candidate):\n    assert math.isclose(candidate(10,5), 314.15000000000003, rel_tol=0.001)\n    assert math.isclose(candidate(4,5), 125.66000000000001, rel_tol=0.001)\n    assert math.isclose(candidate(4,10), 251.32000000000002, rel_tol=0.001)\n"}
{"task_id": "113", "ori_task_id": 234, "prompt": "Write a function to find the volume of a cube given its side length.\nThe function signature is: volume_cube(l)\n", "entry_point": "volume_cube", "test": "\ndef check(candidate):\n    assert candidate(3)==27\n    assert candidate(2)==8\n    assert candidate(5)==125\n"}
{"task_id": "114", "ori_task_id": 235, "prompt": "Write a python function to set all even bits of a given number.\nThe function signature is: even_bit_set_number(n)\n", "entry_point": "even_bit_set_number", "test": "\ndef check(candidate):\n    assert candidate(10) == 10\n    assert candidate(20) == 30\n    assert candidate(30) == 30\n"}
{"task_id": "115", "ori_task_id": 237, "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nThe function signature is: check_occurences(test_list)\n", "entry_point": "check_occurences", "test": "\ndef check(candidate):\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n"}
{"task_id": "116", "ori_task_id": 238, "prompt": "Write a python function to count the number of non-empty substrings of a given string.\nThe function signature is: number_of_substrings(str)\n", "entry_point": "number_of_substrings", "test": "\ndef check(candidate):\n    assert candidate(\"abc\") == 6\n    assert candidate(\"abcd\") == 10\n    assert candidate(\"abcde\") == 15\n"}
{"task_id": "117", "ori_task_id": 239, "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nThe function signature is: get_total_number_of_sequences(m,n)\n", "entry_point": "get_total_number_of_sequences", "test": "\ndef check(candidate):\n    assert candidate(10, 4) == 4\n    assert candidate(5, 2) == 6\n    assert candidate(16, 3) == 84\n"}
{"task_id": "118", "ori_task_id": 240, "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nThe function signature is: replace_list(list1,list2)\n", "entry_point": "replace_list", "test": "\ndef check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert candidate([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n    assert candidate([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n"}
{"task_id": "119", "ori_task_id": 242, "prompt": "Write a function to count the total number of characters in a string.\nThe function signature is: count_charac(str1)\n", "entry_point": "count_charac", "test": "\ndef check(candidate):\n    assert candidate(\"python programming\")==18\n    assert candidate(\"language\")==8\n    assert candidate(\"words\")==5\n"}
{"task_id": "120", "ori_task_id": 244, "prompt": "Write a python function to find the next perfect square greater than a given number.\nThe function signature is: next_Perfect_Square(N)\n", "entry_point": "next_Perfect_Square", "test": "\ndef check(candidate):\n    assert candidate(35) == 36\n    assert candidate(6) == 9\n    assert candidate(9) == 16\n"}
{"task_id": "121", "ori_task_id": 245, "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nThe function signature is: max_sum(arr)\n", "entry_point": "max_sum", "test": "\ndef check(candidate):\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n    assert candidate([80, 60, 30, 40, 20, 10]) == 210\n    assert candidate([2, 3 ,14, 16, 21, 23, 29, 30]) == 138\n"}
{"task_id": "122", "ori_task_id": 246, "prompt": "Write a function for computing square roots using the babylonian method.\nThe function signature is: babylonian_squareroot(number)\n", "entry_point": "babylonian_squareroot", "test": "\ndef check(candidate):\n    assert math.isclose(candidate(10), 3.162277660168379, rel_tol=0.001)\n    assert math.isclose(candidate(2), 1.414213562373095, rel_tol=0.001)\n    assert math.isclose(candidate(9), 3.0, rel_tol=0.001)\n"}
{"task_id": "123", "ori_task_id": 247, "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.\nThe function signature is: lps(str)\n", "entry_point": "lps", "test": "\ndef check(candidate):\n    assert candidate(\"TENS FOR TENS\") == 5\n    assert candidate(\"CARDIO FOR CARDS\") == 7\n    assert candidate(\"PART OF THE JOURNEY IS PART\") == 9\n"}
{"task_id": "124", "ori_task_id": 248, "prompt": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.\nThe function signature is: harmonic_sum(n)\n", "entry_point": "harmonic_sum", "test": "\ndef check(candidate):\n    assert math.isclose(candidate(7), 2.5928571428571425, rel_tol=0.001)\n    assert math.isclose(candidate(4), 2.083333333333333, rel_tol=0.001)\n    assert math.isclose(candidate(19), 3.547739657143682, rel_tol=0.001)\n"}
{"task_id": "125", "ori_task_id": 249, "prompt": "Write a function to find the intersection of two arrays.\nThe function signature is: intersection_array(array_nums1,array_nums2)\n", "entry_point": "intersection_array", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]\n"}
{"task_id": "126", "ori_task_id": 250, "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nThe function signature is: count_X(tup, x)\n", "entry_point": "count_X", "test": "\ndef check(candidate):\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n"}
{"task_id": "127", "ori_task_id": 251, "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nThe function signature is: insert_element(list,element)\n", "entry_point": "insert_element", "test": "\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n    assert candidate(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\n    assert candidate(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\n"}
{"task_id": "128", "ori_task_id": 252, "prompt": "Write a python function to convert complex numbers to polar coordinates.\nThe function signature is: convert(numbers)\n", "entry_point": "convert", "test": "\ndef check(candidate):\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0,0.0)\n    assert candidate(5) == (5.0,0.0)\n"}
{"task_id": "129", "ori_task_id": 253, "prompt": "Write a python function that returns the number of integer elements in a given list.\nThe function signature is: count_integer(list1)\n", "entry_point": "count_integer", "test": "\ndef check(candidate):\n    assert candidate([1,2,'abc',1.2]) == 2\n    assert candidate([1,2,3]) == 3\n    assert candidate([1,1.2,4,5.1]) == 2\n"}
{"task_id": "130", "ori_task_id": 255, "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nThe function signature is: combinations_colors(l, n)\n", "entry_point": "combinations_colors", "test": "\ndef check(candidate):\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert candidate( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n"}
{"task_id": "131", "ori_task_id": 256, "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nThe function signature is: count_Primes_nums(n)\n", "entry_point": "count_Primes_nums", "test": "\ndef check(candidate):\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n"}
{"task_id": "132", "ori_task_id": 257, "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\nThe function signature is: swap_numbers(a,b)\n", "entry_point": "swap_numbers", "test": "\ndef check(candidate):\n    assert candidate(10,20)==(20,10)\n    assert candidate(15,17)==(17,15)\n    assert candidate(100,200)==(200,100)\n"}
{"task_id": "133", "ori_task_id": 259, "prompt": "Write a function to maximize the given two tuples.\nThe function signature is: maximize_elements(test_tup1, test_tup2)\n", "entry_point": "maximize_elements", "test": "\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n"}
{"task_id": "134", "ori_task_id": 260, "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nThe function signature is: newman_prime(n)\n", "entry_point": "newman_prime", "test": "\ndef check(candidate):\n    assert candidate(3) == 7\n    assert candidate(4) == 17\n    assert candidate(5) == 41\n"}
{"task_id": "135", "ori_task_id": 261, "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nThe function signature is: division_elements(test_tup1, test_tup2)\n", "entry_point": "division_elements", "test": "\ndef check(candidate):\n    assert candidate((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert candidate((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n"}
{"task_id": "136", "ori_task_id": 262, "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nThe function signature is: split_two_parts(list1, L)\n", "entry_point": "split_two_parts", "test": "\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n"}
{"task_id": "137", "ori_task_id": 264, "prompt": "Write a function to calculate a dog's age in dog's years.\nThe function signature is: dog_age(h_age)\n", "entry_point": "dog_age", "test": "\ndef check(candidate):\n    assert candidate(12)==61\n    assert candidate(15)==73\n    assert candidate(24)==109\n"}
{"task_id": "138", "ori_task_id": 265, "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nThe function signature is: list_split(S, step)\n", "entry_point": "list_split", "test": "\ndef check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\n    assert candidate(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n"}
{"task_id": "139", "ori_task_id": 266, "prompt": "Write a function to find the lateral surface area of a cube given its side length.\nThe function signature is: lateralsurface_cube(l)\n", "entry_point": "lateralsurface_cube", "test": "\ndef check(candidate):\n    assert candidate(5)==100\n    assert candidate(9)==324\n    assert candidate(10)==400\n"}
{"task_id": "140", "ori_task_id": 267, "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nThe function signature is: square_Sum(n)\n", "entry_point": "square_Sum", "test": "\ndef check(candidate):\n    assert candidate(2) == 10\n    assert candidate(3) == 35\n    assert candidate(4) == 84\n"}
{"task_id": "141", "ori_task_id": 268, "prompt": "Write a function to find the n'th star number.\nThe function signature is: find_star_num(n)\n", "entry_point": "find_star_num", "test": "\ndef check(candidate):\n    assert candidate(3) == 37\n    assert candidate(4) == 73\n    assert candidate(5) == 121\n"}
{"task_id": "142", "ori_task_id": 269, "prompt": "Write a function to find the ascii value of a character.\nThe function signature is: ascii_value(k)\n", "entry_point": "ascii_value", "test": "\ndef check(candidate):\n    assert candidate('A')==65\n    assert candidate('R')==82\n    assert candidate('S')==83\n"}
{"task_id": "143", "ori_task_id": 270, "prompt": "Write a python function to find the sum of even numbers at even positions of a list.\nThe function signature is: sum_even_and_even_index(arr)\n", "entry_point": "sum_even_and_even_index", "test": "\ndef check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8]) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\n    assert candidate([5, 6, 12, 1]) == 12\n"}
{"task_id": "144", "ori_task_id": 271, "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nThe function signature is: even_Power_Sum(n)\n", "entry_point": "even_Power_Sum", "test": "\ndef check(candidate):\n    assert candidate(2) == 1056\n    assert candidate(3) == 8832\n    assert candidate(1) == 32\n"}
{"task_id": "145", "ori_task_id": 272, "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nThe function signature is: rear_extract(test_list)\n", "entry_point": "rear_extract", "test": "\ndef check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n"}
{"task_id": "146", "ori_task_id": 273, "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nThe function signature is: substract_elements(test_tup1, test_tup2)\n", "entry_point": "substract_elements", "test": "\ndef check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n"}
{"task_id": "147", "ori_task_id": 274, "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nThe function signature is: even_binomial_Coeff_Sum( n)\n", "entry_point": "even_binomial_Coeff_Sum", "test": "\ndef check(candidate):\n    assert candidate(4) == 8\n    assert candidate(6) == 32\n    assert candidate(2) == 2\n"}
{"task_id": "148", "ori_task_id": 276, "prompt": "Write a function that takes in the radius and height of a cylinder and returns the the volume.\nThe function signature is: volume_cylinder(r,h)\n", "entry_point": "volume_cylinder", "test": "\ndef check(candidate):\n    assert math.isclose(candidate(10,5), 1570.7500000000002, rel_tol=0.001)\n    assert math.isclose(candidate(4,5), 251.32000000000002, rel_tol=0.001)\n    assert math.isclose(candidate(4,10), 502.64000000000004, rel_tol=0.001)\n"}
{"task_id": "149", "ori_task_id": 277, "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nThe function signature is: dict_filter(dict,n)\n", "entry_point": "dict_filter", "test": "\ndef check(candidate):\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n"}
{"task_id": "150", "ori_task_id": 278, "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.\nThe function signature is: count_first_elements(test_tup)\n", "entry_point": "count_first_elements", "test": "\ndef check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10) ) == 3\n    assert candidate((2, 9, (5, 7), 11) ) == 2\n    assert candidate((11, 15, 5, 8, (2, 3), 8) ) == 4\n"}
{"task_id": "151", "ori_task_id": 279, "prompt": "Write a function to find the nth decagonal number.\nThe function signature is: is_num_decagonal(n)\n", "entry_point": "is_num_decagonal", "test": "\ndef check(candidate):\n    assert candidate(3) == 27\n    assert candidate(7) == 175\n    assert candidate(10) == 370\n"}
{"task_id": "152", "ori_task_id": 280, "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nThe function signature is: sequential_search(dlist, item)\n", "entry_point": "sequential_search", "test": "\ndef check(candidate):\n    assert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n"}
{"task_id": "153", "ori_task_id": 281, "prompt": "Write a python function to check if the elements of a given list are unique or not.\nThe function signature is: all_unique(test_list)\n", "entry_point": "all_unique", "test": "\ndef check(candidate):\n    assert candidate([1,2,3]) == True\n    assert candidate([1,2,1,2]) == False\n    assert candidate([1,2,3,4,5]) == True\n"}
{"task_id": "154", "ori_task_id": 282, "prompt": "Write a function to subtract two lists element-wise.\nThe function signature is: sub_list(nums1,nums2)\n", "entry_point": "sub_list", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert candidate([1,2],[3,4])==[-2,-2]\n    assert candidate([90,120],[50,70])==[40,50]\n"}
{"task_id": "155", "ori_task_id": 283, "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nThe function signature is: validate(n)\n", "entry_point": "validate", "test": "\ndef check(candidate):\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n"}
{"task_id": "156", "ori_task_id": 284, "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nThe function signature is: check_element(list,element)\n", "entry_point": "check_element", "test": "\ndef check(candidate):\n    assert candidate([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n    assert candidate([1,2,3,4],7)==False\n    assert candidate([\"green\", \"green\", \"green\", \"green\"],'green')==True\n"}
{"task_id": "157", "ori_task_id": 285, "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nThe function signature is: text_match_two_three(text)\n", "entry_point": "text_match_two_three", "test": "\ndef check(candidate):\n    assert candidate(\"ac\")==(False)\n    assert candidate(\"dc\")==(False)\n    assert candidate(\"abbbba\")==(True)\n"}
{"task_id": "158", "ori_task_id": 286, "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nThe function signature is: max_sub_array_sum_repeated(a, n, k)\n", "entry_point": "max_sub_array_sum_repeated", "test": "\ndef check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n"}
{"task_id": "159", "ori_task_id": 287, "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nThe function signature is: square_Sum(n)\n", "entry_point": "square_Sum", "test": "\ndef check(candidate):\n    assert candidate(2) == 20\n    assert candidate(3) == 56\n    assert candidate(4) == 120\n"}
{"task_id": "160", "ori_task_id": 290, "prompt": "Write a function to find the list of maximum length in a list of lists.\nThe function signature is: max_length(list1)\n", "entry_point": "max_length", "test": "\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n    assert candidate([[5], [15,20,25]])==(3, [15,20,25])\n"}
{"task_id": "161", "ori_task_id": 291, "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nThe function signature is: count_no_of_ways(n, k)\n", "entry_point": "count_no_of_ways", "test": "\ndef check(candidate):\n    assert candidate(2, 4) == 16\n    assert candidate(3, 2) == 6\n    assert candidate(4, 4) == 228\n"}
{"task_id": "162", "ori_task_id": 292, "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nThe function signature is: find(n,m)\n", "entry_point": "find", "test": "\ndef check(candidate):\n    assert candidate(10,3) == 3\n    assert candidate(4,2) == 2\n    assert candidate(20,5) == 4\n"}
{"task_id": "163", "ori_task_id": 293, "prompt": "Write a function to find the third side of a right angled triangle.\nThe function signature is: otherside_rightangle(w,h)\n", "entry_point": "otherside_rightangle", "test": "\ndef check(candidate):\n    assert candidate(7,8)==10.63014581273465\n    assert candidate(3,4)==5\n    assert candidate(7,15)==16.55294535724685\n"}
{"task_id": "164", "ori_task_id": 294, "prompt": "Write a function to find the maximum value in a given heterogeneous list.\nThe function signature is: max_val(listval)\n", "entry_point": "max_val", "test": "\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==5\n    assert candidate(['Python', 15, 20, 25])==25\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==50\n"}
{"task_id": "165", "ori_task_id": 295, "prompt": "Write a function to return the sum of all divisors of a number.\nThe function signature is: sum_div(number)\n", "entry_point": "sum_div", "test": "\ndef check(candidate):\n    assert candidate(8)==7\n    assert candidate(12)==16\n    assert candidate(7)==1\n"}
{"task_id": "166", "ori_task_id": 296, "prompt": "Write a python function to count inversions in an array.\nThe function signature is: get_Inv_Count(arr)\n", "entry_point": "get_Inv_Count", "test": "\ndef check(candidate):\n    assert candidate([1,20,6,4,5]) == 5\n    assert candidate([1,2,1]) == 1\n    assert candidate([1,2,5,6,1]) == 3\n"}
{"task_id": "167", "ori_task_id": 297, "prompt": "Write a function to flatten a given nested list structure.\nThe function signature is: flatten_list(list1)\n", "entry_point": "flatten_list", "test": "\ndef check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n"}
{"task_id": "168", "ori_task_id": 299, "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\nThe function signature is: max_aggregate(stdata)\n", "entry_point": "max_aggregate", "test": "\ndef check(candidate):\n    assert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert candidate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n    assert candidate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n"}
{"task_id": "169", "ori_task_id": 300, "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nThe function signature is: count_binary_seq(n)\n", "entry_point": "count_binary_seq", "test": "\ndef check(candidate):\n    assert math.isclose(candidate(1), 2.0, rel_tol=0.001)\n    assert math.isclose(candidate(2), 6.0, rel_tol=0.001)\n    assert math.isclose(candidate(3), 20.0, rel_tol=0.001)\n"}
{"task_id": "170", "ori_task_id": 301, "prompt": "Write a function to find the depth of a dictionary.\nThe function signature is: dict_depth(d)\n", "entry_point": "dict_depth", "test": "\ndef check(candidate):\n    assert candidate({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert candidate({'a':1, 'b': {'c':'python'}})==2\n    assert candidate({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n"}
{"task_id": "171", "ori_task_id": 304, "prompt": "Write a python function to find element at a given index after number of rotations.\nThe function signature is: find_Element(arr,ranges,rotations,index) \n", "entry_point": "find_Element", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert candidate([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert candidate([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n"}
{"task_id": "172", "ori_task_id": 305, "prompt": "Write a function to return two words from a list of words starting with letter 'p'.\nThe function signature is: start_withp(words)\n", "entry_point": "start_withp", "test": "\ndef check(candidate):\n    assert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    assert candidate([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n    assert candidate([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n"}
{"task_id": "173", "ori_task_id": 306, "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nThe function signature is: max_sum_increasing_subseq(a, n, index, k)\n", "entry_point": "max_sum_increasing_subseq", "test": "\ndef check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n"}
{"task_id": "174", "ori_task_id": 307, "prompt": "Write a function to get a colon of a tuple.\nThe function signature is: colon_tuplex(tuplex,m,n)\n", "entry_point": "colon_tuplex", "test": "\ndef check(candidate):\n    assert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\n    assert candidate((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n    assert candidate((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\n"}
{"task_id": "175", "ori_task_id": 308, "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nThe function signature is: large_product(nums1, nums2, N)\n", "entry_point": "large_product", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n"}
{"task_id": "176", "ori_task_id": 309, "prompt": "Write a python function to find the maximum of two numbers.\nThe function signature is: maximum(a,b)\n", "entry_point": "maximum", "test": "\ndef check(candidate):\n    assert candidate(5,10) == 10\n    assert candidate(-1,-2) == -1\n    assert candidate(9,7) == 9\n"}
{"task_id": "177", "ori_task_id": 310, "prompt": "Write a function to convert a given string to a tuple of characters.\nThe function signature is: string_to_tuple(str1)\n", "entry_point": "string_to_tuple", "test": "\ndef check(candidate):\n    assert candidate(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert candidate(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert candidate(\"15.10\")==('1', '5', '.', '1', '0')\n"}
{"task_id": "178", "ori_task_id": 311, "prompt": "Write a python function to set the left most unset bit.\nThe function signature is: set_left_most_unset_bit(n)\n", "entry_point": "set_left_most_unset_bit", "test": "\ndef check(candidate):\n    assert candidate(10) == 14\n    assert candidate(12) == 14\n    assert candidate(15) == 15\n"}
{"task_id": "179", "ori_task_id": 312, "prompt": "Write a function to find the volume of a cone.\nThe function signature is: volume_cone(r,h)\n", "entry_point": "volume_cone", "test": "\ndef check(candidate):\n    assert math.isclose(candidate(5,12), 314.15926535897927, rel_tol=0.001)\n    assert math.isclose(candidate(10,15), 1570.7963267948965, rel_tol=0.001)\n    assert math.isclose(candidate(19,17), 6426.651371693521, rel_tol=0.001)\n"}
{"task_id": "180", "ori_task_id": 388, "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\nThe function signature is: highest_Power_of_2(n)\n", "entry_point": "highest_Power_of_2", "test": "\ndef check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n"}
{"task_id": "181", "ori_task_id": 389, "prompt": "Write a function to find the n'th lucas number.\nThe function signature is: find_lucas(n)\n", "entry_point": "find_lucas", "test": "\ndef check(candidate):\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n"}
{"task_id": "182", "ori_task_id": 390, "prompt": "Write a function to apply a given format string to all of the elements in a list.\nThe function signature is: add_string(list_, string)\n", "entry_point": "add_string", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert candidate(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n"}
{"task_id": "183", "ori_task_id": 391, "prompt": "Write a function to convert more than one list to nested dictionary.\nThe function signature is: convert_list_dictionary(l1, l2, l3)\n", "entry_point": "convert_list_dictionary", "test": "\ndef check(candidate):\n    assert candidate([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert candidate([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n    assert candidate([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n"}
{"task_id": "184", "ori_task_id": 392, "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nThe function signature is: get_max_sum (n)\n", "entry_point": "get_max_sum ", "test": "\ndef check(candidate):\n    assert get_max_sum(60) == 106\n    assert get_max_sum(10) == 12\n    assert get_max_sum(2) == 2\n"}
{"task_id": "185", "ori_task_id": 393, "prompt": "Write a function to find the list with maximum length.\nThe function signature is: max_length_list(input_list)\n", "entry_point": "max_length_list", "test": "\ndef check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n"}
{"task_id": "186", "ori_task_id": 394, "prompt": "Write a function to check if given tuple contains no duplicates.\nThe function signature is: check_distinct(test_tup)\n", "entry_point": "check_distinct", "test": "\ndef check(candidate):\n    assert candidate((1, 4, 5, 6, 1, 4)) == False\n    assert candidate((1, 4, 5, 6)) == True\n    assert candidate((2, 3, 4, 5, 6)) == True\n"}
{"task_id": "187", "ori_task_id": 395, "prompt": "Write a python function to find the first non-repeated character in a given string.\nThe function signature is: first_non_repeating_character(str1)\n", "entry_point": "first_non_repeating_character", "test": "\ndef check(candidate):\n    assert candidate(\"abcabc\") == None\n    assert candidate(\"abc\") == \"a\"\n    assert candidate(\"ababc\") == \"c\"\n"}
{"task_id": "188", "ori_task_id": 396, "prompt": "Write a function to check whether the given string starts and ends with the same character or not.\nThe function signature is: check_char(string)\n", "entry_point": "check_char", "test": "\ndef check(candidate):\n    assert candidate(\"abba\") == \"Valid\"\n    assert candidate(\"a\") == \"Valid\"\n    assert candidate(\"abcd\") == \"Invalid\"\n"}
{"task_id": "189", "ori_task_id": 397, "prompt": "Write a function to find the median of three numbers.\nThe function signature is: median_numbers(a,b,c)\n", "entry_point": "median_numbers", "test": "\ndef check(candidate):\n    assert candidate(25,55,65)==55.0\n    assert candidate(20,10,30)==20.0\n    assert candidate(15,45,75)==45.0\n"}
{"task_id": "190", "ori_task_id": 398, "prompt": "Write a function to compute the sum of digits of each number of a given list.\nThe function signature is: sum_of_digits(nums)\n", "entry_point": "sum_of_digits", "test": "\ndef check(candidate):\n    assert candidate([10,2,56])==14\n    assert candidate([[10,20,4,5,'b',70,'a']])==19\n    assert candidate([10,20,-4,5,-70])==19\n"}
{"task_id": "191", "ori_task_id": 399, "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\nThe function signature is: bitwise_xor(test_tup1, test_tup2)\n", "entry_point": "bitwise_xor", "test": "\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n"}
{"task_id": "192", "ori_task_id": 400, "prompt": "Write a function to extract the number of unique tuples in the given list.\nThe function signature is: extract_freq(test_list)\n", "entry_point": "extract_freq", "test": "\ndef check(candidate):\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\n"}
{"task_id": "193", "ori_task_id": 401, "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nThe function signature is: add_nested_tuples(test_tup1, test_tup2)\n", "entry_point": "add_nested_tuples", "test": "\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n"}
{"task_id": "194", "ori_task_id": 404, "prompt": "Write a python function to find the minimum of two numbers.\nThe function signature is: minimum(a,b)\n", "entry_point": "minimum", "test": "\ndef check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(-5,-4) == -5\n    assert candidate(0,0) == 0\n"}
{"task_id": "195", "ori_task_id": 405, "prompt": "Write a function to check whether an element exists within a tuple.\nThe function signature is: check_tuplex(tuplex,tuple1)\n", "entry_point": "check_tuplex", "test": "\ndef check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n"}
{"task_id": "196", "ori_task_id": 406, "prompt": "Write a python function to find whether the parity of a given number is odd.\nThe function signature is: find_Parity(x)\n", "entry_point": "find_Parity", "test": "\ndef check(candidate):\n    assert candidate(12) == False\n    assert candidate(7) == True\n    assert candidate(10) == False\n"}
{"task_id": "197", "ori_task_id": 407, "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\nThe function signature is: rearrange_bigger(n)\n", "entry_point": "rearrange_bigger", "test": "\ndef check(candidate):\n    assert candidate(12)==21\n    assert candidate(10)==False\n    assert candidate(102)==120\n"}
{"task_id": "198", "ori_task_id": 408, "prompt": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nThe function signature is: push(i, j)\n", "entry_point": "push", "test": "\ndef check(candidate):\n    assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n"}
{"task_id": "199", "ori_task_id": 409, "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\nThe function signature is: min_product_tuple(list1)\n", "entry_point": "min_product_tuple", "test": "\ndef check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert candidate([(10,20), (15,2), (5,10)] )==30\n    assert candidate([(11,44), (10,15), (20,5), (12, 9)] )==100\n"}
{"task_id": "200", "ori_task_id": 410, "prompt": "Write a function to find the minimum value in a given heterogeneous list.\nThe function signature is: min_val(listval)\n", "entry_point": "min_val", "test": "\ndef check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version'])==2\n    assert candidate(['Python', 15, 20, 25])==15\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==20\n"}
{"task_id": "201", "ori_task_id": 411, "prompt": "Write a function to convert the given snake case string to camel case string.\nThe function signature is: snake_to_camel(word)\n", "entry_point": "snake_to_camel", "test": "\ndef check(candidate):\n    assert candidate('android_tv') == 'AndroidTv'\n    assert candidate('google_pixel') == 'GooglePixel'\n    assert candidate('apple_watch') == 'AppleWatch'\n"}
{"task_id": "202", "ori_task_id": 412, "prompt": "Write a python function to remove odd numbers from a given list.\nThe function signature is: remove_odd(l)\n", "entry_point": "remove_odd", "test": "\ndef check(candidate):\n    assert candidate([1,2,3]) == [2]\n    assert candidate([2,4,6]) == [2,4,6]\n    assert candidate([10,20,3]) == [10,20]\n"}
{"task_id": "203", "ori_task_id": 413, "prompt": "Write a function to extract the nth element from a given list of tuples.\nThe function signature is: extract_nth_element(list1, n)\n", "entry_point": "extract_nth_element", "test": "\ndef check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n"}
{"task_id": "204", "ori_task_id": 414, "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.\nThe function signature is: overlapping(list1,list2)\n", "entry_point": "overlapping", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,5],[6,7,8,9]) == False\n    assert candidate([1,2,3],[4,5,6]) == False\n    assert candidate([1,4,5],[1,4,5]) == True\n"}
{"task_id": "205", "ori_task_id": 415, "prompt": "Write a python function to find a pair with highest product from a given array of integers.\nThe function signature is: max_Product(arr)\n", "entry_point": "max_Product", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,7,0,8,4]) == (7,8)\n    assert candidate([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    assert candidate([1,2,3]) == (2,3)\n"}
{"task_id": "206", "ori_task_id": 417, "prompt": "Write a function to find common first element in given list of tuple.\nThe function signature is: group_tuples(Input)\n", "entry_point": "group_tuples", "test": "\ndef check(candidate):\n    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert candidate([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert candidate([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n"}
{"task_id": "207", "ori_task_id": 418, "prompt": "Write a python function to find the element of a list having maximum length.\nThe function signature is: Find_Max(lst)\n", "entry_point": "Find_Max", "test": "\ndef check(candidate):\n    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert candidate([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert candidate([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n"}
{"task_id": "208", "ori_task_id": 419, "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nThe function signature is: round_and_sum(list1)\n", "entry_point": "round_and_sum", "test": "\ndef check(candidate):\n    assert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    assert candidate([5,2,9,24.3,29])==345\n    assert candidate([25.0,56.7,89.2])==513\n"}
{"task_id": "209", "ori_task_id": 420, "prompt": "Write a python function to find the cube sum of first n even natural numbers.\nThe function signature is: cube_Sum(n)\n", "entry_point": "cube_Sum", "test": "\ndef check(candidate):\n    assert candidate(2) == 72\n    assert candidate(3) == 288\n    assert candidate(4) == 800\n"}
{"task_id": "210", "ori_task_id": 421, "prompt": "Write a function to concatenate each element of tuple by the delimiter.\nThe function signature is: concatenate_tuple(test_tup)\n", "entry_point": "concatenate_tuple", "test": "\ndef check(candidate):\n    assert candidate((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    assert candidate((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n    assert candidate((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n"}
{"task_id": "211", "ori_task_id": 422, "prompt": "Write a python function to find the average of cubes of first n natural numbers.\nThe function signature is: find_Average_Of_Cube(n)\n", "entry_point": "find_Average_Of_Cube", "test": "\ndef check(candidate):\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n"}
{"task_id": "212", "ori_task_id": 424, "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\nThe function signature is: extract_rear(test_tuple)\n", "entry_point": "extract_rear", "test": "\ndef check(candidate):\n    assert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n"}
{"task_id": "213", "ori_task_id": 425, "prompt": "Write a function to count the number of sublists containing a particular element.\nThe function signature is: count_element_in_list(list1, x)\n", "entry_point": "count_element_in_list", "test": "\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n"}
{"task_id": "214", "ori_task_id": 426, "prompt": "Write a function to filter odd numbers.\nThe function signature is: filter_oddnumbers(nums)\n", "entry_point": "filter_oddnumbers", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert candidate([10,20,45,67,84,93])==[45,67,93]\n    assert candidate([5,7,9,8,6,4,3])==[5,7,9,3]\n"}
{"task_id": "215", "ori_task_id": 427, "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nThe function signature is: change_date_format(dt)\n", "entry_point": "change_date_format", "test": "\ndef check(candidate):\n    assert candidate(\"2026-01-02\") == '02-01-2026'\n    assert candidate(\"2020-11-13\") == '13-11-2020'\n    assert candidate(\"2021-04-26\") == '26-04-2021'\n"}
{"task_id": "216", "ori_task_id": 428, "prompt": "Write a function to sort the given array by using shell sort.\nThe function signature is: shell_sort(my_list)\n", "entry_point": "shell_sort", "test": "\ndef check(candidate):\n    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n"}
{"task_id": "217", "ori_task_id": 429, "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\nThe function signature is: and_tuples(test_tup1, test_tup2)\n", "entry_point": "and_tuples", "test": "\ndef check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n"}
{"task_id": "218", "ori_task_id": 430, "prompt": "Write a function to find the directrix of a parabola.\nThe function signature is: parabola_directrix(a, b, c)\n", "entry_point": "parabola_directrix", "test": "\ndef check(candidate):\n    assert candidate(5,3,2)==-198\n    assert candidate(9,8,4)==-2336\n    assert candidate(2,4,6)==-130\n"}
{"task_id": "219", "ori_task_id": 431, "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\nThe function signature is: common_element(list1, list2)\n", "entry_point": "common_element", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,5], [5,6,7,8,9])==True\n    assert candidate([1,2,3,4,5], [6,7,8,9])==None\n    assert candidate(['a','b','c'], ['d','b','e'])==True\n"}
{"task_id": "220", "ori_task_id": 432, "prompt": "Write a function to find the median length of a trapezium.\nThe function signature is: median_trapezium(base1,base2,height)\n", "entry_point": "median_trapezium", "test": "\ndef check(candidate):\n    assert candidate(15,25,35)==20\n    assert candidate(10,20,30)==15\n    assert candidate(6,9,4)==7.5\n"}
{"task_id": "221", "ori_task_id": 433, "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\nThe function signature is: check_greater(arr, number)\n", "entry_point": "check_greater", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == False\n    assert candidate([2, 3, 4, 5, 6], 8) == True\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == True\n"}
{"task_id": "222", "ori_task_id": 434, "prompt": "Write a function that matches a string that has an a followed by one or more b's.\nThe function signature is: text_match_one(text)\n", "entry_point": "text_match_one", "test": "\ndef check(candidate):\n    assert candidate(\"ac\")==False\n    assert candidate(\"dc\")==False\n    assert candidate(\"abba\")==True\n"}
{"task_id": "223", "ori_task_id": 435, "prompt": "Write a python function to find the last digit of a given number.\nThe function signature is: last_Digit(n) \n", "entry_point": "last_Digit", "test": "\ndef check(candidate):\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n"}
{"task_id": "224", "ori_task_id": 436, "prompt": "Write a python function to return the negative numbers in a list.\nThe function signature is: neg_nos(list1)\n", "entry_point": "neg_nos", "test": "\ndef check(candidate):\n    assert candidate([-1,4,5,-6]) == [-1,-6]\n    assert candidate([-1,-2,3,4]) == [-1,-2]\n    assert candidate([-7,-6,8,9]) == [-7,-6]\n"}
{"task_id": "225", "ori_task_id": 437, "prompt": "Write a function to remove odd characters in a string.\nThe function signature is: remove_odd(str1)\n", "entry_point": "remove_odd", "test": "\ndef check(candidate):\n    assert candidate(\"python\")==(\"yhn\")\n    assert candidate(\"program\")==(\"rga\")\n    assert candidate(\"language\")==(\"agae\")\n"}
{"task_id": "226", "ori_task_id": 438, "prompt": "Write a function to count bidirectional tuple pairs.\nThe function signature is: count_bidirectional(test_list)\n", "entry_point": "count_bidirectional", "test": "\ndef check(candidate):\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4\n"}
{"task_id": "227", "ori_task_id": 439, "prompt": "Write a function to join a list of multiple integers into a single integer.\nThe function signature is: multiple_to_single(L)\n", "entry_point": "multiple_to_single", "test": "\ndef check(candidate):\n    assert candidate([11, 33, 50])==113350\n    assert candidate([-1,2,3,4,5,6])==-123456\n    assert candidate([10,15,20,25])==10152025\n"}
{"task_id": "228", "ori_task_id": 440, "prompt": "Write a function to find the first adverb and their positions in a given sentence.\nThe function signature is: find_adverb_position(text)\n", "entry_point": "find_adverb_position", "test": "\ndef check(candidate):\n    assert candidate(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert candidate(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n    assert candidate(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n"}
{"task_id": "229", "ori_task_id": 441, "prompt": "Write a function to find the surface area of a cube of a given size.\nThe function signature is: surfacearea_cube(l)\n", "entry_point": "surfacearea_cube", "test": "\ndef check(candidate):\n    assert candidate(5)==150\n    assert candidate(3)==54\n    assert candidate(10)==600\n"}
{"task_id": "230", "ori_task_id": 442, "prompt": "Write a function to find the ration of positive numbers in an array of integers.\nThe function signature is: positive_count(nums)\n", "entry_point": "positive_count", "test": "\ndef check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n"}
{"task_id": "231", "ori_task_id": 443, "prompt": "Write a python function to find the largest negative number from the given list.\nThe function signature is: largest_neg(list1)\n", "entry_point": "largest_neg", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,-4,-6]) == -6\n    assert candidate([1,2,3,-8,-9]) == -9\n    assert candidate([1,2,3,4,-1]) == -1\n"}
{"task_id": "232", "ori_task_id": 444, "prompt": "Write a function to trim each tuple by k in the given tuple list.\nThe function signature is: trim_tuple(test_list, K)\n", "entry_point": "trim_tuple", "test": "\ndef check(candidate):\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    assert candidate([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n"}
{"task_id": "233", "ori_task_id": 445, "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nThe function signature is: index_multiplication(test_tup1, test_tup2)\n", "entry_point": "index_multiplication", "test": "\ndef check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n"}
{"task_id": "234", "ori_task_id": 446, "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\nThe function signature is: count_Occurrence(tup, lst)\n", "entry_point": "count_Occurrence", "test": "\ndef check(candidate):\n    assert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert candidate((1,2,3,4,5,6),[1,2]) == 2\n"}
{"task_id": "235", "ori_task_id": 447, "prompt": "Write a function to find cubes of individual elements in a list.\nThe function signature is: cube_nums(nums)\n", "entry_point": "cube_nums", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10,20,30])==([1000, 8000, 27000])\n    assert candidate([12,15])==([1728, 3375])\n"}
{"task_id": "236", "ori_task_id": 448, "prompt": "Write a function to calculate the sum of perrin numbers.\nThe function signature is: cal_sum(n)\n", "entry_point": "cal_sum", "test": "\ndef check(candidate):\n    assert candidate(9) == 49\n    assert candidate(10) == 66\n    assert candidate(11) == 88\n"}
{"task_id": "237", "ori_task_id": 450, "prompt": "Write a function to extract specified size of strings from a given list of string values.\nThe function signature is: extract_string(str, l)\n", "entry_point": "extract_string", "test": "\ndef check(candidate):\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n"}
{"task_id": "238", "ori_task_id": 451, "prompt": "Write a function to remove all whitespaces from the given string.\nThe function signature is: remove_whitespaces(text1)\n", "entry_point": "remove_whitespaces", "test": "\ndef check(candidate):\n    assert candidate(' Google    Flutter ') == 'GoogleFlutter'\n    assert candidate(' Google    Dart ') == 'GoogleDart'\n    assert candidate(' iOS    Swift ') == 'iOSSwift'\n"}
{"task_id": "239", "ori_task_id": 452, "prompt": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nThe function signature is: loss_amount(actual_cost,sale_amount)\n", "entry_point": "loss_amount", "test": "\ndef check(candidate):\n    assert candidate(1500,1200)==0\n    assert candidate(100,200)==100\n    assert candidate(2000,5000)==3000\n"}
{"task_id": "240", "ori_task_id": 453, "prompt": "Write a python function to find the sum of even factors of a number.\nThe function signature is: sumofFactors(n) \n", "entry_point": "sumofFactors", "test": "\ndef check(candidate):\n    assert candidate(18) == 26\n    assert candidate(30) == 48\n    assert candidate(6) == 8\n"}
{"task_id": "241", "ori_task_id": 454, "prompt": "Write a function that matches a word containing 'z'.\nThe function signature is: text_match_wordz(text)\n", "entry_point": "text_match_wordz", "test": "\ndef check(candidate):\n    assert candidate(\"pythonz.\")==True\n    assert candidate(\"xyz.\")==True\n    assert candidate(\"  lang  .\")==False\n"}
{"task_id": "242", "ori_task_id": 455, "prompt": "Write a function to check whether the given month number contains 31 days or not.\nThe function signature is: check_monthnumb_number(monthnum2)\n", "entry_point": "check_monthnumb_number", "test": "\ndef check(candidate):\n    assert candidate(5)==True\n    assert candidate(2)==False\n    assert candidate(6)==False\n"}
{"task_id": "243", "ori_task_id": 456, "prompt": "Write a function to reverse each string in a given list of string values.\nThe function signature is: reverse_string_list(stringlist)\n", "entry_point": "reverse_string_list", "test": "\ndef check(candidate):\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert candidate(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert candidate(['jack','john','mary'])==['kcaj','nhoj','yram']\n"}
{"task_id": "244", "ori_task_id": 457, "prompt": "Write a python function to find the sublist having minimum length.\nThe function signature is: Find_Min(lst)\n", "entry_point": "Find_Min", "test": "\ndef check(candidate):\n    assert candidate([[1],[1,2],[1,2,3]]) == [1]\n    assert candidate([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert candidate([['x'],['x','y'],['x','y','z']]) == ['x']\n"}
{"task_id": "245", "ori_task_id": 458, "prompt": "Write a function to find the area of a rectangle.\nThe function signature is: rectangle_area(l,b)\n", "entry_point": "rectangle_area", "test": "\ndef check(candidate):\n    assert candidate(10,20)==200\n    assert candidate(10,5)==50\n    assert candidate(4,2)==8\n"}
{"task_id": "246", "ori_task_id": 459, "prompt": "Write a function to remove uppercase substrings from a given string.\nThe function signature is: remove_uppercase(str1)\n", "entry_point": "remove_uppercase", "test": "\ndef check(candidate):\n    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n"}
{"task_id": "247", "ori_task_id": 460, "prompt": "Write a python function to get the first element of each sublist.\nThe function signature is: Extract(lst)\n", "entry_point": "Extract", "test": "\ndef check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1,2,3],[4, 5]]) == [1,4]\n    assert candidate([[9,8,1],[1,2]]) == [9,1]\n"}
{"task_id": "248", "ori_task_id": 461, "prompt": "Write a python function to count the upper case characters in a given string.\nThe function signature is: upper_ctr(str)\n", "entry_point": "upper_ctr", "test": "\ndef check(candidate):\n    assert candidate('PYthon') == 1\n    assert candidate('BigData') == 1\n    assert candidate('program') == 0\n"}
{"task_id": "249", "ori_task_id": 462, "prompt": "Write a function to find all possible combinations of the elements of a given list.\nThe function signature is: combinations_list(list1)\n", "entry_point": "combinations_list", "test": "\ndef check(candidate):\n    assert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n"}
{"task_id": "250", "ori_task_id": 463, "prompt": "Write a function to find the maximum product subarray of the given array.\nThe function signature is: max_subarray_product(arr)\n", "entry_point": "max_subarray_product", "test": "\ndef check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180\n    assert candidate([-2, -40, 0, -2, -3]) == 80\n"}
{"task_id": "251", "ori_task_id": 464, "prompt": "Write a function to check if all values are same in a dictionary.\nThe function signature is: check_value(dict, n)\n", "entry_point": "check_value", "test": "\ndef check(candidate):\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n"}
{"task_id": "252", "ori_task_id": 465, "prompt": "Write a function to drop empty items from a given dictionary.\nThe function signature is: drop_empty(dict1)\n", "entry_point": "drop_empty", "test": "\ndef check(candidate):\n    assert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert candidate({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert candidate({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n"}
{"task_id": "253", "ori_task_id": 468, "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nThe function signature is: max_product(arr)\n", "entry_point": "max_product", "test": "\ndef check(candidate):\n    assert candidate([3, 100, 4, 5, 150, 6]) == 3000\n    assert candidate([4, 42, 55, 68, 80]) == 50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n"}
{"task_id": "254", "ori_task_id": 470, "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nThe function signature is: add_pairwise(test_tup)\n", "entry_point": "add_pairwise", "test": "\ndef check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n"}
{"task_id": "255", "ori_task_id": 471, "prompt": "Write a python function to find the product of the array multiplication modulo n.\nThe function signature is: find_remainder(arr, n)\n", "entry_point": "find_remainder", "test": "\ndef check(candidate):\n    assert candidate([ 100, 10, 5, 25, 35, 14 ],11) ==9\n    assert candidate([1,1,1],1) == 0\n    assert candidate([1,2,1],2) == 0\n"}
{"task_id": "256", "ori_task_id": 472, "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\nThe function signature is: check_Consecutive(l)\n", "entry_point": "check_Consecutive", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,5]) == True\n    assert candidate([1,2,3,5,6]) == False\n    assert candidate([1,2,1]) == False\n"}
{"task_id": "257", "ori_task_id": 473, "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nThe function signature is: tuple_intersection(test_list1, test_list2)\n", "entry_point": "tuple_intersection", "test": "\ndef check(candidate):\n    assert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert candidate([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert candidate([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n"}
{"task_id": "258", "ori_task_id": 474, "prompt": "Write a function to replace characters in a string.\nThe function signature is: replace_char(str1,ch,newch)\n", "entry_point": "replace_char", "test": "\ndef check(candidate):\n    assert candidate(\"polygon\",'y','l')==(\"pollgon\")\n    assert candidate(\"character\",'c','a')==(\"aharaater\")\n    assert candidate(\"python\",'l','a')==(\"python\")\n"}
{"task_id": "259", "ori_task_id": 475, "prompt": "Write a function to sort a dictionary by value.\nThe function signature is: sort_counter(dict1)\n", "entry_point": "sort_counter", "test": "\ndef check(candidate):\n    assert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert candidate({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n"}
{"task_id": "260", "ori_task_id": 476, "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\nThe function signature is: big_sum(nums)\n", "entry_point": "big_sum", "test": "\ndef check(candidate):\n    assert candidate([1,2,3]) == 4\n    assert candidate([-1,2,3,4]) == 3\n    assert candidate([2,3,6]) == 8\n"}
{"task_id": "261", "ori_task_id": 477, "prompt": "Write a python function to convert the given string to lower case.\nThe function signature is: is_lower(string)\n", "entry_point": "is_lower", "test": "\ndef check(candidate):\n    assert candidate(\"InValid\") == \"invalid\"\n    assert candidate(\"TruE\") == \"true\"\n    assert candidate(\"SenTenCE\") == \"sentence\"\n"}
{"task_id": "262", "ori_task_id": 478, "prompt": "Write a function to remove lowercase substrings from a given string.\nThe function signature is: remove_lowercase(str1)\n", "entry_point": "remove_lowercase", "test": "\ndef check(candidate):\n    assert candidate(\"PYTHon\")==('PYTH')\n    assert candidate(\"FInD\")==('FID')\n    assert candidate(\"STRinG\")==('STRG')\n"}
{"task_id": "263", "ori_task_id": 479, "prompt": "Write a python function to find the first digit of a given number.\nThe function signature is: first_Digit(n) \n", "entry_point": "first_Digit", "test": "\ndef check(candidate):\n    assert candidate(123) == 1\n    assert candidate(456) == 4\n    assert candidate(12) == 1\n"}
{"task_id": "264", "ori_task_id": 554, "prompt": "Write a python function which takes a list of integers and only returns the odd ones.\nThe function signature is: Split(list)\n", "entry_point": "Split", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6]) == [1,3,5]\n    assert candidate([10,11,12,13]) == [11,13]\n    assert candidate([7,8,9,1]) == [7,9,1]\n"}
{"task_id": "265", "ori_task_id": 555, "prompt": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nThe function signature is: difference(n) \n", "entry_point": "difference", "test": "\ndef check(candidate):\n    assert candidate(3) == 30\n    assert candidate(5) == 210\n    assert candidate(2) == 6\n"}
{"task_id": "266", "ori_task_id": 556, "prompt": "Write a python function to count the number of pairs whose xor value is odd.\nThe function signature is: find_Odd_Pair(A,N) \n", "entry_point": "find_Odd_Pair", "test": "\ndef check(candidate):\n    assert candidate([5,4,7,2,1],5) == 6\n    assert candidate([7,2,8,1,0,5,11],7) == 12\n    assert candidate([1,2,3],3) == 2\n"}
{"task_id": "267", "ori_task_id": 557, "prompt": "Write a function to toggle the case of all characters in a string.\nThe function signature is: toggle_string(string)\n", "entry_point": "toggle_string", "test": "\ndef check(candidate):\n    assert candidate(\"Python\")==(\"pYTHON\")\n    assert candidate(\"Pangram\")==(\"pANGRAM\")\n    assert candidate(\"LIttLE\")==(\"liTTle\")\n"}
{"task_id": "268", "ori_task_id": 558, "prompt": "Write a python function to find the sum of the per-digit difference between two integers.\nThe function signature is: digit_distance_nums(n1, n2)\n", "entry_point": "digit_distance_nums", "test": "\ndef check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(23,56) == 6\n    assert candidate(123,256) == 7\n"}
{"task_id": "269", "ori_task_id": 559, "prompt": "Write a function to find the sum of the largest contiguous sublist in the given list.\nThe function signature is: max_sub_array_sum(a, size)\n", "entry_point": "max_sub_array_sum", "test": "\ndef check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n"}
{"task_id": "270", "ori_task_id": 560, "prompt": "Write a function to find the union of the elements of two given tuples and output them in sorted order.\nThe function signature is: union_elements(test_tup1, test_tup2)\n", "entry_point": "union_elements", "test": "\ndef check(candidate):\n    assert candidate((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n    assert candidate((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\n    assert candidate((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n"}
{"task_id": "271", "ori_task_id": 562, "prompt": "Write a python function to find the length of the longest sublists.\nThe function signature is: Find_Max_Length(lst)\n", "entry_point": "Find_Max_Length", "test": "\ndef check(candidate):\n    assert candidate([[1],[1,4],[5,6,7,8]]) == 4\n    assert candidate([[0,1],[2,2,],[3,2,1]]) == 3\n    assert candidate([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n"}
{"task_id": "272", "ori_task_id": 563, "prompt": "Write a function to extract values between quotation marks from a string.\nThe function signature is: extract_values(text)\n", "entry_point": "extract_values", "test": "\ndef check(candidate):\n    assert candidate('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n    assert candidate('\"python\",\"program\",\"language\"')==['python','program','language']\n    assert candidate('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n"}
{"task_id": "273", "ori_task_id": 564, "prompt": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nThe function signature is: count_Pairs(arr,n)\n", "entry_point": "count_Pairs", "test": "\ndef check(candidate):\n    assert candidate([1,2,1],3) == 2\n    assert candidate([1,1,1,1],4) == 0\n    assert candidate([1,2,3,4,5],5) == 10\n"}
{"task_id": "274", "ori_task_id": 565, "prompt": "Write a python function to split a string into characters.\nThe function signature is: split(word)\n", "entry_point": "split", "test": "\ndef check(candidate):\n    assert candidate('python') == ['p','y','t','h','o','n']\n    assert candidate('Name') == ['N','a','m','e']\n    assert candidate('program') == ['p','r','o','g','r','a','m']\n"}
{"task_id": "275", "ori_task_id": 566, "prompt": "Write a function to get the sum of the digits of a non-negative integer.\nThe function signature is: sum_digits(n)\n", "entry_point": "sum_digits", "test": "\ndef check(candidate):\n    assert candidate(345)==12\n    assert candidate(12)==3\n    assert candidate(97)==16\n"}
{"task_id": "276", "ori_task_id": 567, "prompt": "Write a function to check whether a specified list is sorted or not.\nThe function signature is: issort_list(list1)\n", "entry_point": "issort_list", "test": "\ndef check(candidate):\n    assert candidate([1,2,4,6,8,10,12,14,16,17])==True\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n    assert candidate([1, 2, 4, 6, 8, 10,15,14,20])==False\n"}
{"task_id": "277", "ori_task_id": 568, "prompt": "Write a function to create a list of N empty dictionaries.\nThe function signature is: empty_list(length)\n", "entry_point": "empty_list", "test": "\ndef check(candidate):\n    assert candidate(5)==[{},{},{},{},{}]\n    assert candidate(6)==[{},{},{},{},{},{}]\n    assert candidate(7)==[{},{},{},{},{},{},{}]\n"}
{"task_id": "278", "ori_task_id": 569, "prompt": "Write a function to sort each sublist of strings in a given list of lists.\nThe function signature is: sort_sublists(list1)\n", "entry_point": "sort_sublists", "test": "\ndef check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert candidate([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n"}
{"task_id": "279", "ori_task_id": 572, "prompt": "Write a python function to remove duplicate numbers from a given number of lists.\nThe function signature is: two_unique_nums(nums)\n", "entry_point": "two_unique_nums", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,2,3,4,5]) == [1, 4, 5]\n    assert candidate([1,2,3,2,4,5]) == [1, 3, 4, 5]\n    assert candidate([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n"}
{"task_id": "280", "ori_task_id": 573, "prompt": "Write a python function to calculate the product of the unique numbers in a given list.\nThe function signature is: unique_product(list_data)\n", "entry_point": "unique_product", "test": "\ndef check(candidate):\n    assert candidate([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n    assert candidate([1, 2, 3, 1,]) == 6\n    assert candidate([7, 8, 9, 0, 1, 1]) == 0\n"}
{"task_id": "281", "ori_task_id": 574, "prompt": "Write a function to find the surface area of a cylinder.\nThe function signature is: surfacearea_cylinder(r,h)\n", "entry_point": "surfacearea_cylinder", "test": "\ndef check(candidate):\n    assert candidate(10,5)==942.45\n    assert candidate(4,5)==226.18800000000002\n    assert candidate(4,10)==351.848\n"}
{"task_id": "282", "ori_task_id": 576, "prompt": "Write a python function to check whether a list is sublist of another or not.\nThe function signature is: is_Sub_Array(A,B)\n", "entry_point": "is_Sub_Array", "test": "\ndef check(candidate):\n    assert candidate([1,4,3,5],[1,2]) == False\n    assert candidate([1,2,1],[1,2,1]) == True\n    assert candidate([1,0,2,2],[2,2,0]) ==False\n"}
{"task_id": "283", "ori_task_id": 577, "prompt": "Write a python function to find the last digit in factorial of a given number.\nThe function signature is: last_Digit_Factorial(n)\n", "entry_point": "last_Digit_Factorial", "test": "\ndef check(candidate):\n    assert candidate(4) == 4\n    assert candidate(21) == 0\n    assert candidate(30) == 0\n"}
{"task_id": "284", "ori_task_id": 578, "prompt": "Write a function to interleave 3 lists of the same length into a single flat list.\nThe function signature is: interleave_lists(list1,list2,list3)\n", "entry_point": "interleave_lists", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert candidate([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\n    assert candidate([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n"}
{"task_id": "285", "ori_task_id": 579, "prompt": "Write a function to find the dissimilar elements in the given two tuples.\nThe function signature is: find_dissimilar(test_tup1, test_tup2)\n", "entry_point": "find_dissimilar", "test": "\ndef check(candidate):\n    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n    assert candidate((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n    assert candidate((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n"}
{"task_id": "286", "ori_task_id": 580, "prompt": "Write a function to remove uneven elements in the nested mixed tuple.\nThe function signature is: extract_even(test_tuple)\n", "entry_point": "extract_even", "test": "\ndef check(candidate):\n    assert candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n    assert candidate((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n    assert candidate((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n"}
{"task_id": "287", "ori_task_id": 581, "prompt": "Write a python function to find the surface area of a square pyramid with a given base edge and height.\nThe function signature is: surface_Area(b,s)\n", "entry_point": "surface_Area", "test": "\ndef check(candidate):\n    assert candidate(3,4) == 33\n    assert candidate(4,5) == 56\n    assert candidate(1,2) == 5\n"}
{"task_id": "288", "ori_task_id": 582, "prompt": "Write a function to check if a dictionary is empty\nThe function signature is: my_dict(dict1)\n", "entry_point": "my_dict", "test": "\ndef check(candidate):\n    assert candidate({10})==False\n    assert candidate({11})==False\n    assert candidate({})==True\n"}
{"task_id": "289", "ori_task_id": 583, "prompt": "Write a function which returns nth catalan number.\nThe function signature is: catalan_number(num)\n", "entry_point": "catalan_number", "test": "\ndef check(candidate):\n    assert candidate(10)==16796\n    assert candidate(9)==4862\n    assert candidate(7)==429\n"}
{"task_id": "290", "ori_task_id": 584, "prompt": "Write a function to find the first adverb ending with ly and its positions in a given string.\nThe function signature is: find_adverbs(text)\n", "entry_point": "find_adverbs", "test": "\ndef check(candidate):\n    assert candidate(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n    assert candidate(\"Please handle the situation carefuly\") == '28-36: carefuly'\n    assert candidate(\"Complete the task quickly\") == '18-25: quickly'\n"}
{"task_id": "291", "ori_task_id": 585, "prompt": "Write a function to find the n most expensive items in a given dataset.\nThe function signature is: expensive_items(items,n)\n", "entry_point": "expensive_items", "test": "\ndef check(candidate):\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n"}
{"task_id": "292", "ori_task_id": 586, "prompt": "Write a python function to split a list at the nth eelment and add the first part to the end.\nThe function signature is: split_Arr(l, n)\n", "entry_point": "split_Arr", "test": "\ndef check(candidate):\n    assert candidate([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n    assert candidate([1,2,3,4],1) == [2,3,4,1]\n    assert candidate([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]\n"}
{"task_id": "293", "ori_task_id": 587, "prompt": "Write a function to convert a list to a tuple.\nThe function signature is: list_tuple(listx)\n", "entry_point": "list_tuple", "test": "\ndef check(candidate):\n    assert candidate([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert candidate([58,44,56])==(58,44,56)\n"}
{"task_id": "294", "ori_task_id": 588, "prompt": "Write a python function to find the difference between largest and smallest value in a given list.\nThe function signature is: big_diff(nums)\n", "entry_point": "big_diff", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4]) == 3\n    assert candidate([4,5,12]) == 8\n    assert candidate([9,2,3]) == 7\n"}
{"task_id": "295", "ori_task_id": 589, "prompt": "Write a function to find perfect squares between two given numbers.\nThe function signature is: perfect_squares(a, b)\n", "entry_point": "perfect_squares", "test": "\ndef check(candidate):\n    assert candidate(1,30)==[1, 4, 9, 16, 25]\n    assert candidate(50,100)==[64, 81, 100]\n    assert candidate(100,200)==[100, 121, 144, 169, 196]\n"}
{"task_id": "296", "ori_task_id": 590, "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\nThe function signature is: polar_rect(x,y)\n", "entry_point": "polar_rect", "test": "\ndef check(candidate):\n    assert candidate(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    assert candidate(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n    assert candidate(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n"}
{"task_id": "297", "ori_task_id": 591, "prompt": "Write a python function to interchange the first and last elements in a list.\nThe function signature is: swap_List(newList)\n", "entry_point": "swap_List", "test": "\ndef check(candidate):\n    assert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n"}
{"task_id": "298", "ori_task_id": 592, "prompt": "Write a python function to find the sum of the product of consecutive binomial co-efficients.\nThe function signature is: sum_Of_product(n)\n", "entry_point": "sum_Of_product", "test": "\ndef check(candidate):\n    assert candidate(3) == 15\n    assert candidate(4) == 56\n    assert candidate(1) == 1\n"}
{"task_id": "299", "ori_task_id": 593, "prompt": "Write a function to remove leading zeroes from an ip address.\nThe function signature is: removezero_ip(ip)\n", "entry_point": "removezero_ip", "test": "\ndef check(candidate):\n    assert candidate(\"216.08.094.196\")==('216.8.94.196')\n    assert candidate(\"12.01.024\")==('12.1.24')\n    assert candidate(\"216.08.094.0196\")==('216.8.94.196')\n"}
{"task_id": "300", "ori_task_id": 594, "prompt": "Write a function to find the difference of the first even and first odd number of a given list.\nThe function signature is: diff_even_odd(list1)\n", "entry_point": "diff_even_odd", "test": "\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==3\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==1\n    assert candidate([1,5,7,9,10])==9\n"}
{"task_id": "301", "ori_task_id": 595, "prompt": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nThe function signature is: min_Swaps(str1,str2) \n", "entry_point": "min_Swaps", "test": "\ndef check(candidate):\n    assert candidate(\"1101\",\"1110\") == 1\n    assert candidate(\"111\",\"000\") == \"Not Possible\"\n    assert candidate(\"111\",\"110\") == \"Not Possible\"\n"}
{"task_id": "302", "ori_task_id": 596, "prompt": "Write a function to find the size in bytes of the given tuple.\nThe function signature is: tuple_size(tuple_list)\n", "entry_point": "tuple_size", "test": "\ndef check(candidate):\n    assert candidate((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n    assert candidate((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n    assert candidate(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n"}
{"task_id": "303", "ori_task_id": 597, "prompt": "Write a function to find kth element from the given two sorted arrays.\nThe function signature is: find_kth(arr1, arr2, k)\n", "entry_point": "find_kth", "test": "\ndef check(candidate):\n    assert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\n    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8\n"}
{"task_id": "304", "ori_task_id": 598, "prompt": "Write a function to check whether the given number is armstrong or not.\nThe function signature is: armstrong_number(number)\n", "entry_point": "armstrong_number", "test": "\ndef check(candidate):\n    assert candidate(153)==True\n    assert candidate(259)==False\n    assert candidate(4458)==False\n"}
{"task_id": "305", "ori_task_id": 599, "prompt": "Write a function to find sum and average of first n natural numbers.\nThe function signature is: sum_average(number)\n", "entry_point": "sum_average", "test": "\ndef check(candidate):\n    assert candidate(10)==(55, 5.5)\n    assert candidate(15)==(120, 8.0)\n    assert candidate(20)==(210, 10.5)\n"}
{"task_id": "306", "ori_task_id": 600, "prompt": "Write a python function to check whether the given number is even or not.\nThe function signature is: is_Even(n) \n", "entry_point": "is_Even", "test": "\ndef check(candidate):\n    assert candidate(1) == False\n    assert candidate(2) == True\n    assert candidate(3) == False\n"}
{"task_id": "307", "ori_task_id": 602, "prompt": "Write a python function to find the first repeated character in a given string.\nThe function signature is: first_repeated_char(str1)\n", "entry_point": "first_repeated_char", "test": "\ndef check(candidate):\n    assert candidate(\"abcabc\") == \"a\"\n    assert candidate(\"abc\") == None\n    assert candidate(\"123123\") == \"1\"\n"}
{"task_id": "308", "ori_task_id": 603, "prompt": "Write a function to get all lucid numbers smaller than or equal to a given integer.\nThe function signature is: get_ludic(n)\n", "entry_point": "get_ludic", "test": "\ndef check(candidate):\n    assert candidate(10) == [1, 2, 3, 5, 7]\n    assert candidate(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert candidate(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n"}
{"task_id": "309", "ori_task_id": 604, "prompt": "Write a function to reverse words seperated by spaces in a given string.\nThe function signature is: reverse_words(s)\n", "entry_point": "reverse_words", "test": "\ndef check(candidate):\n    assert candidate(\"python program\")==(\"program python\")\n    assert candidate(\"java language\")==(\"language java\")\n    assert candidate(\"indian man\")==(\"man indian\")\n"}
{"task_id": "310", "ori_task_id": 605, "prompt": "Write a function to check if the given integer is a prime number.\nThe function signature is: prime_num(num)\n", "entry_point": "prime_num", "test": "\ndef check(candidate):\n    assert candidate(13)==True\n    assert candidate(7)==True\n    assert candidate(-1010)==False\n"}
{"task_id": "311", "ori_task_id": 606, "prompt": "Write a function to convert degrees to radians.\nThe function signature is: radian_degree(degree)\n", "entry_point": "radian_degree", "test": "\ndef check(candidate):\n    assert candidate(90)==1.5707963267948966\n    assert candidate(60)==1.0471975511965976\n    assert candidate(120)==2.0943951023931953\n"}
{"task_id": "312", "ori_task_id": 607, "prompt": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nThe function signature is: find_literals(text, pattern)\n", "entry_point": "find_literals", "test": "\ndef check(candidate):\n    assert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert candidate('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    assert candidate('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n"}
{"task_id": "313", "ori_task_id": 608, "prompt": "Write a python function to find nth bell number.\nThe function signature is: bell_Number(n)\n", "entry_point": "bell_Number", "test": "\ndef check(candidate):\n    assert candidate(2) == 2\n    assert candidate(3) == 5\n    assert candidate(4) == 15\n"}
{"task_id": "314", "ori_task_id": 610, "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nThe function signature is: remove_kth_element(list1, L)\n", "entry_point": "remove_kth_element", "test": "\ndef check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n"}
{"task_id": "315", "ori_task_id": 611, "prompt": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nThe function signature is: max_of_nth(test_list, N)\n", "entry_point": "max_of_nth", "test": "\ndef check(candidate):\n    assert candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n    assert candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\n    assert candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n"}
{"task_id": "316", "ori_task_id": 612, "prompt": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nThe function signature is: merge(lst)\n", "entry_point": "merge", "test": "\ndef check(candidate):\n    assert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert candidate([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\n"}
{"task_id": "317", "ori_task_id": 614, "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nThe function signature is: cummulative_sum(test_list)\n", "entry_point": "cummulative_sum", "test": "\ndef check(candidate):\n    assert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30\n    assert candidate([(2, 4), (6, 7, 8), (3, 7)]) == 37\n    assert candidate([(3, 5), (7, 8, 9), (4, 8)]) == 44\n"}
{"task_id": "318", "ori_task_id": 615, "prompt": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nThe function signature is: average_tuple(nums)\n", "entry_point": "average_tuple", "test": "\ndef check(candidate):\n    assert candidate(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n    assert candidate(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\n    assert candidate( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n"}
{"task_id": "319", "ori_task_id": 616, "prompt": "Write a function which takes two tuples of the same length and performs the element wise modulo.\nThe function signature is: tuple_modulo(test_tup1, test_tup2)\n", "entry_point": "tuple_modulo", "test": "\ndef check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n"}
{"task_id": "320", "ori_task_id": 617, "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nThe function signature is: min_Jumps(steps, d)\n", "entry_point": "min_Jumps", "test": "\ndef check(candidate):\n    assert candidate((3,4),11)==3.5\n    assert candidate((3,4),0)==0\n    assert candidate((11,14),11)==1\n"}
{"task_id": "321", "ori_task_id": 618, "prompt": "Write a function to divide two lists element wise.\nThe function signature is: div_list(nums1,nums2)\n", "entry_point": "div_list", "test": "\ndef check(candidate):\n    assert candidate([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n    assert candidate([3,2],[1,4])==[3.0, 0.5]\n    assert candidate([90,120],[50,70])==[1.8, 1.7142857142857142]\n"}
{"task_id": "322", "ori_task_id": 619, "prompt": "Write a function to move all the numbers to the end of the given string.\nThe function signature is: move_num(test_str)\n", "entry_point": "move_num", "test": "\ndef check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n"}
{"task_id": "323", "ori_task_id": 620, "prompt": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nThe function signature is: largest_subset(a)\n", "entry_point": "largest_subset", "test": "\ndef check(candidate):\n    assert candidate([ 1, 3, 6, 13, 17, 18 ]) == 4\n    assert candidate([10, 5, 3, 15, 20]) == 3\n    assert candidate([18, 1, 3, 6, 13, 17]) == 4\n"}
{"task_id": "324", "ori_task_id": 622, "prompt": "Write a function to find the median of two sorted lists of same size.\nThe function signature is: get_median(arr1, arr2, n)\n", "entry_point": "get_median", "test": "\ndef check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n"}
{"task_id": "325", "ori_task_id": 623, "prompt": "Write a function to compute the n-th power of each number in a list.\nThe function signature is: nth_nums(nums,n)\n", "entry_point": "nth_nums", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10,20,30],3)==([1000, 8000, 27000])\n    assert candidate([12,15],5)==([248832, 759375])\n"}
{"task_id": "326", "ori_task_id": 624, "prompt": "Write a python function to convert a given string to uppercase.\nThe function signature is: is_upper(string)\n", "entry_point": "is_upper", "test": "\ndef check(candidate):\n    assert candidate(\"person\") ==\"PERSON\"\n    assert candidate(\"final\") == \"FINAL\"\n    assert candidate(\"Valid\") == \"VALID\"\n"}
{"task_id": "327", "ori_task_id": 625, "prompt": "Write a python function to interchange the first and last element in a given list.\nThe function signature is: swap_List(newList)\n", "entry_point": "swap_List", "test": "\ndef check(candidate):\n    assert candidate([1,2,3]) == [3,2,1]\n    assert candidate([1,2,3,4,4]) == [4,2,3,4,1]\n    assert candidate([4,5,6]) == [6,5,4]\n"}
{"task_id": "328", "ori_task_id": 626, "prompt": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nThe function signature is: triangle_area(r) \n", "entry_point": "triangle_area", "test": "\ndef check(candidate):\n    assert candidate(-1) == None\n    assert candidate(0) == 0\n    assert candidate(2) == 4\n"}
{"task_id": "329", "ori_task_id": 627, "prompt": "Write a python function to find the smallest missing number from a sorted list of natural numbers.\nThe function signature is: find_First_Missing(array,start=0,end=None)\n", "entry_point": "find_First_Missing", "test": "\ndef check(candidate):\n    assert candidate([0,1,2,3]) == 4\n    assert candidate([0,1,2,6,9]) == 3\n    assert candidate([2,3,5,8,9]) == 0\n"}
{"task_id": "330", "ori_task_id": 628, "prompt": "Write a function to replace all spaces in the given string with '%20'.\nThe function signature is: replace_spaces(string)\n", "entry_point": "replace_spaces", "test": "\ndef check(candidate):\n    assert candidate(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n    assert candidate(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\n    assert candidate(\"I love Coding\") == 'I%20love%20Coding'\n"}
{"task_id": "331", "ori_task_id": 629, "prompt": "Write a python function to find even numbers from a list of numbers.\nThe function signature is: Split(list)\n", "entry_point": "Split", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,4,5]) == [2,4]\n    assert candidate([4,5,6,7,8,0,1]) == [4,6,8,0]\n    assert candidate ([8,12,15,19]) == [8,12]\n"}
{"task_id": "332", "ori_task_id": 630, "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nThe function signature is: get_coordinates(test_tup)\n", "entry_point": "get_coordinates", "test": "\ndef check(candidate):\n    assert candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert candidate((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert candidate((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n"}
{"task_id": "333", "ori_task_id": 631, "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string.\nThe function signature is: replace_spaces(text)\n", "entry_point": "replace_spaces", "test": "\ndef check(candidate):\n    assert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    assert candidate('The_Avengers') == 'The Avengers'\n    assert candidate('Fast and Furious') == 'Fast_and_Furious'\n"}
{"task_id": "334", "ori_task_id": 632, "prompt": "Write a python function to move all zeroes to the end of the given list.\nThe function signature is: move_zero(num_list)\n", "entry_point": "move_zero", "test": "\ndef check(candidate):\n    assert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n    assert candidate([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\n    assert candidate([0,1,0,1,1]) == [1,1,1,0,0]\n"}
{"task_id": "335", "ori_task_id": 633, "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given list.\nThe function signature is: pair_xor_Sum(arr,n) \n", "entry_point": "pair_xor_Sum", "test": "\ndef check(candidate):\n    assert candidate([5,9,7,6],4) == 47\n    assert candidate([7,3,5],3) == 12\n    assert candidate([7,3],2) == 4\n"}
{"task_id": "336", "ori_task_id": 635, "prompt": "Write a function to sort the given list.\nThe function signature is: heap_sort(iterable)\n", "entry_point": "heap_sort", "test": "\ndef check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate( [7, 1, 9, 5])==[1,5,7,9]\n"}
{"task_id": "337", "ori_task_id": 637, "prompt": "Write a function to check whether the given amount has no profit and no loss\nThe function signature is: noprofit_noloss(actual_cost,sale_amount)\n", "entry_point": "noprofit_noloss", "test": "\ndef check(candidate):\n    assert candidate(1500,1200)==False\n    assert candidate(100,100)==True\n    assert candidate(2000,5000)==False\n"}
{"task_id": "338", "ori_task_id": 638, "prompt": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nThe function signature is: wind_chill(v,t)\n", "entry_point": "wind_chill", "test": "\ndef check(candidate):\n    assert candidate(120,35)==40\n    assert candidate(40,20)==19\n    assert candidate(10,8)==6\n"}
{"task_id": "339", "ori_task_id": 639, "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nThe function signature is: sample_nam(sample_names)\n", "entry_point": "sample_nam", "test": "\ndef check(candidate):\n    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n    assert candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\n    assert candidate([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n"}
{"task_id": "340", "ori_task_id": 640, "prompt": "Write a function to remove the parenthesis and what is inbetween them from a string.\nThe function signature is: remove_parenthesis(items)\n", "entry_point": "remove_parenthesis", "test": "\ndef check(candidate):\n    assert candidate([\"python (chrome)\"])==(\"python\")\n    assert candidate([\"string(.abc)\"])==(\"string\")\n    assert candidate([\"alpha(num)\"])==(\"alpha\")\n"}
{"task_id": "341", "ori_task_id": 641, "prompt": "Write a function to find the nth nonagonal number.\nThe function signature is: is_nonagonal(n)\n", "entry_point": "is_nonagonal", "test": "\ndef check(candidate):\n    assert candidate(10) == 325\n    assert candidate(15) == 750\n    assert candidate(18) == 1089\n"}
{"task_id": "342", "ori_task_id": 643, "prompt": "Write a function that checks if a strings contains 'z', except at the start and end of the word.\nThe function signature is: text_match_wordz_middle(text)\n", "entry_point": "text_match_wordz_middle", "test": "\ndef check(candidate):\n    assert candidate(\"pythonzabc.\")==True\n    assert candidate(\"zxyabc.\")==False\n    assert candidate(\"  lang  .\")==False\n"}
{"task_id": "343", "ori_task_id": 644, "prompt": "Write a python function to reverse an array upto a given position.\nThe function signature is: reverse_Array_Upto_K(input, k)\n", "entry_point": "reverse_Array_Upto_K", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n    assert candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n    assert candidate([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n"}
{"task_id": "344", "ori_task_id": 720, "prompt": "Write a function to add a dictionary to the tuple. The output should be a tuple.\nThe function signature is: add_dict_to_tuple(test_tup, test_dict)\n", "entry_point": "add_dict_to_tuple", "test": "\ndef check(candidate):\n    assert candidate((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    assert candidate((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n    assert candidate((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n"}
{"task_id": "345", "ori_task_id": 721, "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nThe function signature is: maxAverageOfPath(cost)\n", "entry_point": "maxAverageOfPath", "test": "\ndef check(candidate):\n    assert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n"}
{"task_id": "346", "ori_task_id": 722, "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nThe function signature is: filter_data(students,h,w)\n", "entry_point": "filter_data", "test": "\ndef check(candidate):\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n"}
{"task_id": "347", "ori_task_id": 723, "prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nThe function signature is: count_same_pair(nums1, nums2)\n", "entry_point": "count_same_pair", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\n    assert candidate([0, 1, 1, 2],[0, 1, 2, 2])==3\n"}
{"task_id": "348", "ori_task_id": 724, "prompt": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nThe function signature is: power_base_sum(base, power)\n", "entry_point": "power_base_sum", "test": "\ndef check(candidate):\n    assert candidate(2,100)==115\n    assert candidate(8,10)==37\n    assert candidate(8,15)==62\n    assert candidate(3,3)==9\n"}
{"task_id": "349", "ori_task_id": 725, "prompt": "Write a function to extract values between quotation marks \" \" of the given string.\nThe function signature is: extract_quotation(text1)\n", "entry_point": "extract_quotation", "test": "\ndef check(candidate):\n    assert candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n    assert candidate('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n    assert candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\n    assert candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []\n"}
{"task_id": "350", "ori_task_id": 726, "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nThe function signature is: multiply_elements(test_tup)\n", "entry_point": "multiply_elements", "test": "\ndef check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n    assert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\n    assert candidate((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\n    assert candidate((12,)) == ()\n"}
{"task_id": "351", "ori_task_id": 728, "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nThe function signature is: sum_list(lst1,lst2)\n", "entry_point": "sum_list", "test": "\ndef check(candidate):\n    assert candidate([10,20,30],[15,25,35])==[25,45,65]\n    assert candidate([1,2,3],[5,6,7])==[6,8,10]\n    assert candidate([15,20,30],[15,45,75])==[30,65,105]\n"}
{"task_id": "352", "ori_task_id": 730, "prompt": "Write a function to remove consecutive duplicates of a given list.\nThe function signature is: consecutive_duplicates(nums)\n", "entry_point": "consecutive_duplicates", "test": "\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']\n"}
{"task_id": "353", "ori_task_id": 731, "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h.\nThe function signature is: lateralsurface_cone(r,h)\n", "entry_point": "lateralsurface_cone", "test": "\ndef check(candidate):\n    assert candidate(5,12)==204.20352248333654\n    assert candidate(10,15)==566.3586699569488\n    assert candidate(19,17)==1521.8090132193388\n"}
{"task_id": "354", "ori_task_id": 732, "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nThe function signature is: replace_specialchar(text)\n", "entry_point": "replace_specialchar", "test": "\ndef check(candidate):\n    assert candidate('Python language, Programming language.')==('Python:language::Programming:language:')\n    assert candidate('a b c,d e f')==('a:b:c:d:e:f')\n    assert candidate('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n"}
{"task_id": "355", "ori_task_id": 733, "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\nThe function signature is: find_first_occurrence(A, x)\n", "entry_point": "find_first_occurrence", "test": "\ndef check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n"}
{"task_id": "356", "ori_task_id": 734, "prompt": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nThe function signature is: sum_Of_Subarray_Prod(arr)\n", "entry_point": "sum_Of_Subarray_Prod", "test": "\ndef check(candidate):\n    assert candidate([1,2,3]) == 20\n    assert candidate([1,2]) == 5\n    assert candidate([1,2,3,4]) == 84\n"}
{"task_id": "357", "ori_task_id": 735, "prompt": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nThe function signature is: toggle_middle_bits(n)\n", "entry_point": "toggle_middle_bits", "test": "\ndef check(candidate):\n    assert candidate(9) == 15\n    assert candidate(10) == 12\n    assert candidate(11) == 13\n    assert candidate(0b1000001) == 0b1111111\n    assert candidate(0b1001101) == 0b1110011\n"}
{"task_id": "358", "ori_task_id": 736, "prompt": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nThe function signature is: left_insertion(a, x)\n", "entry_point": "left_insertion", "test": "\ndef check(candidate):\n    assert candidate([1,2,4,5],6)==4\n    assert candidate([1,2,4,5],3)==2\n    assert candidate([1,2,4,5],7)==4\n"}
{"task_id": "359", "ori_task_id": 737, "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\nThe function signature is: check_str(string)\n", "entry_point": "check_str", "test": "\ndef check(candidate):\n    assert candidate(\"annie\")\n    assert not candidate(\"dawood\")\n    assert candidate(\"Else\")\n"}
{"task_id": "360", "ori_task_id": 738, "prompt": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nThe function signature is: geometric_sum(n)\n", "entry_point": "geometric_sum", "test": "\ndef check(candidate):\n    assert candidate(7) == 1.9921875\n    assert candidate(4) == 1.9375\n    assert candidate(8) == 1.99609375\n"}
{"task_id": "361", "ori_task_id": 739, "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nThe function signature is: find_Index(n)\n", "entry_point": "find_Index", "test": "\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 14\n    assert candidate(4) == 45\n"}
{"task_id": "362", "ori_task_id": 740, "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nThe function signature is: tuple_to_dict(test_tup)\n", "entry_point": "tuple_to_dict", "test": "\ndef check(candidate):\n    assert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    assert candidate((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\n    assert candidate((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n"}
{"task_id": "363", "ori_task_id": 741, "prompt": "Write a python function to check whether all the characters are same or not.\nThe function signature is: all_Characters_Same(s) \n", "entry_point": "all_Characters_Same", "test": "\ndef check(candidate):\n    assert candidate(\"python\") == False\n    assert candidate(\"aaa\") == True\n    assert candidate(\"data\") == False\n"}
{"task_id": "364", "ori_task_id": 742, "prompt": "Write a function to caluclate the area of a tetrahedron.\nThe function signature is: area_tetrahedron(side)\n", "entry_point": "area_tetrahedron", "test": "\ndef check(candidate):\n    assert candidate(3)==15.588457268119894\n    assert candidate(20)==692.8203230275509\n    assert candidate(10)==173.20508075688772\n"}
{"task_id": "365", "ori_task_id": 743, "prompt": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nThe function signature is: rotate_right(list, m)\n", "entry_point": "rotate_right", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n"}
{"task_id": "366", "ori_task_id": 744, "prompt": "Write a function to check if the given tuple has any none value or not.\nThe function signature is: check_none(test_tup)\n", "entry_point": "check_none", "test": "\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, None)) == True\n    assert candidate((7, 8, 9, 11, 14)) == False\n    assert candidate((1, 2, 3, 4, None)) == True\n"}
{"task_id": "367", "ori_task_id": 745, "prompt": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nThe function signature is: divisible_by_digits(startnum, endnum)\n", "entry_point": "divisible_by_digits", "test": "\ndef check(candidate):\n    assert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert candidate(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert candidate(20,25)==[22, 24]\n"}
{"task_id": "368", "ori_task_id": 746, "prompt": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nThe function signature is: sector_area(r,a)\n", "entry_point": "sector_area", "test": "\ndef check(candidate):\n    assert candidate(4,45)==6.283185307179586\n    assert candidate(9,45)==31.808625617596654\n    assert candidate(9,361)==None\n"}
{"task_id": "369", "ori_task_id": 747, "prompt": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nThe function signature is: lcs_of_three(X, Y, Z)\n", "entry_point": "lcs_of_three", "test": "\ndef check(candidate):\n    assert candidate('AGGT12', '12TXAYB', '12XBA') == 2\n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels') == 5\n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea') == 3\n"}
{"task_id": "370", "ori_task_id": 748, "prompt": "Write a function to put spaces between words starting with capital letters in a given string.\nThe function signature is: capital_words_spaces(str1)\n", "entry_point": "capital_words_spaces", "test": "\ndef check(candidate):\n    assert candidate(\"Python\") == 'Python'\n    assert candidate(\"PythonProgrammingExamples\") == 'Python Programming Examples'\n    assert candidate(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n"}
{"task_id": "371", "ori_task_id": 749, "prompt": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nThe function signature is: sort_numeric_strings(nums_str)\n", "entry_point": "sort_numeric_strings", "test": "\ndef check(candidate):\n    assert candidate( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert candidate(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert candidate(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n"}
{"task_id": "372", "ori_task_id": 750, "prompt": "Write a function to add the given tuple to the given list.\nThe function signature is: add_tuple(test_list, test_tup)\n", "entry_point": "add_tuple", "test": "\ndef check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert candidate([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n    assert candidate([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n"}
{"task_id": "373", "ori_task_id": 751, "prompt": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nThe function signature is: check_min_heap(arr)\n", "entry_point": "check_min_heap", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([2, 3, 4, 5, 10, 15]) == True\n    assert candidate([2, 10, 4, 5, 3, 15]) == False\n"}
{"task_id": "374", "ori_task_id": 752, "prompt": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nThe function signature is: jacobsthal_num(n)\n", "entry_point": "jacobsthal_num", "test": "\ndef check(candidate):\n    assert candidate(5) == 11\n    assert candidate(2) == 1\n    assert candidate(4) == 5\n    assert candidate(13) == 2731\n"}
{"task_id": "375", "ori_task_id": 753, "prompt": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nThe function signature is: min_k(test_list, K)\n", "entry_point": "min_k", "test": "\ndef check(candidate):\n    assert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n"}
{"task_id": "376", "ori_task_id": 754, "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nThe function signature is: extract_index_list(l1, l2, l3)\n", "entry_point": "extract_index_list", "test": "\ndef check(candidate):\n    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n    assert candidate([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\n    assert candidate([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\n    assert candidate([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]\n"}
{"task_id": "377", "ori_task_id": 755, "prompt": "Write a function to find the second smallest number in a list.\nThe function signature is: second_smallest(numbers)\n", "entry_point": "second_smallest", "test": "\ndef check(candidate):\n    assert candidate([1, 2, -8, -2, 0, -2])==-2\n    assert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n    assert candidate([2,2])==None\n    assert candidate([2,2,2])==None\n"}
{"task_id": "378", "ori_task_id": 756, "prompt": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nThe function signature is: text_match_zero_one(text)\n", "entry_point": "text_match_zero_one", "test": "\ndef check(candidate):\n    assert candidate(\"ac\")==False\n    assert candidate(\"dc\")==False\n    assert candidate(\"abbbba\")==True\n    assert candidate(\"dsabbbba\")==True\n    assert candidate(\"asbbbba\")==False\n    assert candidate(\"abaaa\")==True\n"}
{"task_id": "379", "ori_task_id": 757, "prompt": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nThe function signature is: count_reverse_pairs(test_list)\n", "entry_point": "count_reverse_pairs", "test": "\ndef check(candidate):\n    assert candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n    assert candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\n    assert candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2\n"}
{"task_id": "380", "ori_task_id": 758, "prompt": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nThe function signature is: unique_sublists(list1)\n", "entry_point": "unique_sublists", "test": "\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n    assert candidate([['john']])=={('john',): 1}\n"}
{"task_id": "381", "ori_task_id": 759, "prompt": "Write a function to check whether a given string is a decimal number with a precision of 2.\nThe function signature is: is_decimal(num)\n", "entry_point": "is_decimal", "test": "\ndef check(candidate):\n    assert candidate('123.11')==True\n    assert candidate('e666.86')==False\n    assert candidate('3.124587')==False\n    assert candidate('1.11')==True\n    assert candidate('1.1.11')==False\n"}
{"task_id": "382", "ori_task_id": 760, "prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not.\nThe function signature is: unique_Element(arr)\n", "entry_point": "unique_Element", "test": "\ndef check(candidate):\n    assert candidate([1,1,1]) == True\n    assert candidate([1,2,1,2]) == False\n    assert candidate([1,2,3,4,5]) == False\n"}
{"task_id": "383", "ori_task_id": 762, "prompt": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nThe function signature is: check_monthnumber_number(monthnum3)\n", "entry_point": "check_monthnumber_number", "test": "\ndef check(candidate):\n    assert candidate(6)==True\n    assert candidate(2)==False\n    assert candidate(12)==False\n"}
{"task_id": "384", "ori_task_id": 763, "prompt": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nThe function signature is: find_min_diff(arr,n)\n", "entry_point": "find_min_diff", "test": "\ndef check(candidate):\n    assert candidate((1,5,3,19,18,25),6) == 1\n    assert candidate((4,3,2,6),4) == 1\n    assert candidate((30,5,20,9),4) == 4\n"}
{"task_id": "385", "ori_task_id": 764, "prompt": "Write a python function to count number of digits in a given string.\nThe function signature is: number_ctr(str)\n", "entry_point": "number_ctr", "test": "\ndef check(candidate):\n    assert candidate('program2bedone') == 1\n    assert candidate('3wonders') == 1\n    assert candidate('123') == 3\n    assert candidate('3wond-1ers2') == 3\n"}
{"task_id": "386", "ori_task_id": 765, "prompt": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nThe function signature is: is_polite(n)\n", "entry_point": "is_polite", "test": "\ndef check(candidate):\n    assert candidate(7) == 11\n    assert candidate(4) == 7\n    assert candidate(9) == 13\n"}
{"task_id": "387", "ori_task_id": 766, "prompt": "Write a function to return a list of all pairs of consecutive items in a given list.\nThe function signature is: pair_wise(l1)\n", "entry_point": "pair_wise", "test": "\ndef check(candidate):\n    assert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    assert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert candidate([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n"}
{"task_id": "388", "ori_task_id": 767, "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nThe function signature is: get_pairs_count(arr, sum)\n", "entry_point": "get_pairs_count", "test": "\ndef check(candidate):\n    assert candidate([1,1,1,1],2) == 6\n    assert candidate([1,5,7,-1,5],6) == 3\n    assert candidate([1,-2,3],1) == 1\n    assert candidate([-1,-2,3],-3) == 1\n"}
{"task_id": "389", "ori_task_id": 769, "prompt": "Write a python function to get the difference between two lists.\nThe function signature is: Diff(li1,li2)\n", "entry_point": "Diff", "test": "\ndef check(candidate):\n    assert (candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n    assert (candidate([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\n    assert (candidate([1,2,3], [6,7,1])) == [2,3,6,7]\n"}
{"task_id": "390", "ori_task_id": 770, "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\nThe function signature is: odd_num_sum(n) \n", "entry_point": "odd_num_sum", "test": "\ndef check(candidate):\n    assert candidate(2) == 82\n    assert candidate(3) == 707\n    assert candidate(4) == 3108\n"}
{"task_id": "391", "ori_task_id": 771, "prompt": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nThe function signature is: check_expression(exp)\n", "entry_point": "check_expression", "test": "\ndef check(candidate):\n    assert candidate(\"{()}[{}]\") == True\n    assert candidate(\"{()}[{]\") == False\n    assert candidate(\"{()}[{}][]({})\") == True\n"}
{"task_id": "392", "ori_task_id": 772, "prompt": "Write a function to remove all the words with k length in the given string.\nThe function signature is: remove_length(test_str, K)\n", "entry_point": "remove_length", "test": "\ndef check(candidate):\n    assert candidate('The person is most value tet', 3) == 'person is most value'\n    assert candidate('If you told me about this ok', 4) == 'If you me about ok'\n    assert candidate('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n"}
{"task_id": "393", "ori_task_id": 773, "prompt": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nThe function signature is: occurance_substring(text,pattern)\n", "entry_point": "occurance_substring", "test": "\ndef check(candidate):\n    assert candidate('python programming, python language','python')==('python', 0, 6)\n    assert candidate('python programming,programming language','programming')==('programming', 7, 18)\n    assert candidate('python programming,programming language','language')==('language', 31, 39)\n    assert candidate('c++ programming, c++ language','python')==None\n"}
{"task_id": "394", "ori_task_id": 775, "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\nThe function signature is: odd_position(nums)\n", "entry_point": "odd_position", "test": "\ndef check(candidate):\n    assert candidate([2,1,4,3,6,7,6,3]) == True\n    assert candidate([4,1,2]) == True\n    assert candidate([1,2,3]) == False\n"}
{"task_id": "395", "ori_task_id": 776, "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\nThe function signature is: count_vowels(test_str)\n", "entry_point": "count_vowels", "test": "\ndef check(candidate):\n    assert candidate('bestinstareels') == 7\n    assert candidate('partofthejourneyistheend') == 12\n    assert candidate('amazonprime') == 5\n"}
{"task_id": "396", "ori_task_id": 777, "prompt": "Write a python function to find the sum of non-repeated elements in a given list.\nThe function signature is: find_sum(arr)\n", "entry_point": "find_sum", "test": "\ndef check(candidate):\n    assert candidate([1,2,3,1,1,4,5,6]) == 21\n    assert candidate([1,10,9,4,2,10,10,45,4]) == 71\n    assert candidate([12,10,9,45,2,10,10,45,10]) == 78\n"}
{"task_id": "397", "ori_task_id": 778, "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\nThe function signature is: pack_consecutive_duplicates(list1)\n", "entry_point": "pack_consecutive_duplicates", "test": "\ndef check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n"}
{"task_id": "398", "ori_task_id": 779, "prompt": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\nThe function signature is: unique_sublists(list1)\n", "entry_point": "unique_sublists", "test": "\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n"}
{"task_id": "399", "ori_task_id": 780, "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nThe function signature is: find_combinations(test_list)\n", "entry_point": "find_combinations", "test": "\ndef check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n"}
{"task_id": "400", "ori_task_id": 781, "prompt": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nThe function signature is: count_divisors(n) \n", "entry_point": "count_divisors", "test": "\ndef check(candidate):\n    assert candidate(10)\n    assert not candidate(100)\n    assert candidate(125)\n"}
{"task_id": "401", "ori_task_id": 782, "prompt": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nThe function signature is: odd_length_sum(arr)\n", "entry_point": "odd_length_sum", "test": "\ndef check(candidate):\n    assert candidate([1,2,4]) == 14\n    assert candidate([1,2,1,2]) == 15\n    assert candidate([1,7]) == 8\n"}
{"task_id": "402", "ori_task_id": 783, "prompt": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nThe function signature is: rgb_to_hsv(r, g, b)\n", "entry_point": "rgb_to_hsv", "test": "\ndef check(candidate):\n    assert candidate(255, 255, 255)==(0, 0.0, 100.0)\n    assert candidate(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\n    assert candidate(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)\n"}
{"task_id": "403", "ori_task_id": 784, "prompt": "Write a function to find the product of first even and odd number of a given list.\nThe function signature is: mul_even_odd(list1)\n", "entry_point": "mul_even_odd", "test": "\ndef check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8])==4\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==2\n    assert candidate([1,5,7,9,10])==10\n"}
{"task_id": "404", "ori_task_id": 785, "prompt": "Write a function to convert tuple string to integer tuple.\nThe function signature is: tuple_str_int(test_str)\n", "entry_point": "tuple_str_int", "test": "\ndef check(candidate):\n    assert candidate(\"(7, 8, 9)\") == (7, 8, 9)\n    assert candidate(\"(1, 2, 3)\") == (1, 2, 3)\n    assert candidate(\"(4, 5, 6)\") == (4, 5, 6)\n    assert candidate(\"(7, 81, 19)\") == (7, 81, 19)\n"}
{"task_id": "405", "ori_task_id": 786, "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\nThe function signature is: right_insertion(a, x)\n", "entry_point": "right_insertion", "test": "\ndef check(candidate):\n    assert candidate([1,2,4,5],6)==4\n    assert candidate([1,2,4,5],3)==2\n    assert candidate([1,2,4,5],7)==4\n"}
{"task_id": "406", "ori_task_id": 787, "prompt": "Write a function that matches a string that has an a followed by three 'b'.\nThe function signature is: text_match_three(text)\n", "entry_point": "text_match_three", "test": "\ndef check(candidate):\n    assert not candidate(\"ac\")\n    assert not candidate(\"dc\")\n    assert candidate(\"abbbba\")\n    assert candidate(\"caacabbbba\")\n"}
{"task_id": "407", "ori_task_id": 788, "prompt": "Write a function to create a new tuple from the given string and list.\nThe function signature is: new_tuple(test_list, test_str)\n", "entry_point": "new_tuple", "test": "\ndef check(candidate):\n    assert candidate([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n    assert candidate([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\n    assert candidate([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n"}
{"task_id": "408", "ori_task_id": 790, "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\nThe function signature is: even_position(nums)\n", "entry_point": "even_position", "test": "\ndef check(candidate):\n    assert candidate([3,2,1]) == False\n    assert candidate([1,2,3]) == False\n    assert candidate([2,1,4]) == True\n"}
{"task_id": "409", "ori_task_id": 791, "prompt": "Write a function to remove tuples from the given tuple.\nThe function signature is: remove_nested(test_tup)\n", "entry_point": "remove_nested", "test": "\ndef check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\n    assert candidate((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)\n"}
{"task_id": "410", "ori_task_id": 792, "prompt": "Write a python function to count the number of lists in a given number of lists.\nThe function signature is: count_list(input_list)\n", "entry_point": "count_list", "test": "\ndef check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n    assert candidate([[1,2],[2,3],[4,5]]) == 3\n    assert candidate([[1,0],[2,0]]) == 2\n"}
{"task_id": "411", "ori_task_id": 793, "prompt": "Write a python function to find the last position of an element in a sorted array.\nThe function signature is: last(arr,x)\n", "entry_point": "last", "test": "\ndef check(candidate):\n    assert candidate([1,2,3],1) == 0\n    assert candidate([1,1,1,2,3,4],1) == 2\n    assert candidate([2,3,2,3,6,8,9],3) == 3\n"}
{"task_id": "412", "ori_task_id": 794, "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nThe function signature is: text_starta_endb(text)\n", "entry_point": "text_starta_endb", "test": "\ndef check(candidate):\n    assert candidate(\"aabbbb\")\n    assert not candidate(\"aabAbbbc\")\n    assert not candidate(\"accddbbjjj\")\n"}
{"task_id": "413", "ori_task_id": 796, "prompt": "Write function to find the sum of all items in the given dictionary.\nThe function signature is: return_sum(dict)\n", "entry_point": "return_sum", "test": "\ndef check(candidate):\n    assert candidate({'a': 100, 'b':200, 'c':300}) == 600\n    assert candidate({'a': 25, 'b':18, 'c':45}) == 88\n    assert candidate({'a': 36, 'b':39, 'c':49}) == 124\n"}
{"task_id": "414", "ori_task_id": 797, "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\nThe function signature is: sum_in_range(l,r)\n", "entry_point": "sum_in_range", "test": "\ndef check(candidate):\n    assert candidate(2,5) == 8\n    assert candidate(5,7) == 12\n    assert candidate(7,13) == 40\n"}
{"task_id": "415", "ori_task_id": 798, "prompt": "Write a python function to find the sum of an array.\nThe function signature is: _sum(arr)\n", "entry_point": "_sum", "test": "\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([15, 12, 13, 10]) == 50\n    assert candidate([0, 1, 2]) == 3\n"}
{"task_id": "416", "ori_task_id": 799, "prompt": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nThe function signature is: left_rotate(n,d)\n", "entry_point": "left_rotate", "test": "\ndef check(candidate):\n    assert candidate(16,2) == 64\n    assert candidate(10,2) == 40\n    assert candidate(99,3) == 792\n    assert candidate(99,3) == 792\n    assert candidate(0b0001,3) == 0b1000\n    assert candidate(0b0101,3) == 0b101000\n    assert candidate(0b11101,3) == 0b11101000\n"}
{"task_id": "417", "ori_task_id": 800, "prompt": "Write a function to remove all whitespaces from a string.\nThe function signature is: remove_all_spaces(text)\n", "entry_point": "remove_all_spaces", "test": "\ndef check(candidate):\n    assert candidate('python  program')==('pythonprogram')\n    assert candidate('python   programming    language')==('pythonprogramminglanguage')\n    assert candidate('python                     program')==('pythonprogram')\n    assert candidate('   python                     program')=='pythonprogram'\n"}
{"task_id": "418", "ori_task_id": 801, "prompt": "Write a python function to count the number of equal numbers from three given integers.\nThe function signature is: test_three_equal(x,y,z)\n", "entry_point": "test_three_equal", "test": "\ndef check(candidate):\n    assert candidate(1,1,1) == 3\n    assert candidate(-1,-2,-3) == 0\n    assert candidate(1,2,2) == 2\n"}
{"task_id": "419", "ori_task_id": 802, "prompt": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nThe function signature is: count_rotation(arr)\n", "entry_point": "count_rotation", "test": "\ndef check(candidate):\n    assert candidate([3,2,1]) == 1\n    assert candidate([4,5,1,2,3]) == 2\n    assert candidate([7,8,9,1,2,3]) == 3\n    assert candidate([1,2,3]) == 0\n    assert candidate([1,3,2]) == 2\n"}
{"task_id": "420", "ori_task_id": 803, "prompt": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nThe function signature is: is_perfect_square(n) \n", "entry_point": "is_perfect_square", "test": "\ndef check(candidate):\n    assert not candidate(10)\n    assert candidate(36)\n    assert not candidate(14)\n    assert candidate(14*14)\n    assert not candidate(125)\n    assert candidate(125*125)\n"}
{"task_id": "421", "ori_task_id": 804, "prompt": "Write a function to check whether the product of numbers in a list is even or not.\nThe function signature is: is_product_even(arr)\n", "entry_point": "is_product_even", "test": "\ndef check(candidate):\n    assert candidate([1,2,3])\n    assert candidate([1,2,1,4])\n    assert not candidate([1,1])\n"}
{"task_id": "422", "ori_task_id": 805, "prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest.\nThe function signature is: max_sum_list(lists)\n", "entry_point": "max_sum_list", "test": "\ndef check(candidate):\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n    assert candidate([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\n    assert candidate([[2,3,1]])==[2,3,1]\n"}
{"task_id": "423", "ori_task_id": 806, "prompt": "Write a function to find maximum run of uppercase characters in the given string.\nThe function signature is: max_run_uppercase(test_str)\n", "entry_point": "max_run_uppercase", "test": "\ndef check(candidate):\n    assert candidate('GeMKSForGERksISBESt') == 5\n    assert candidate('PrECIOusMOVemENTSYT') == 6\n    assert candidate('GooGLEFluTTER') == 4\n"}
{"task_id": "424", "ori_task_id": 807, "prompt": "Write a python function to find the first odd number in a given list of numbers.\nThe function signature is: first_odd(nums)\n", "entry_point": "first_odd", "test": "\ndef check(candidate):\n    assert candidate([1,3,5]) == 1\n    assert candidate([2,4,1,3]) == 1\n    assert candidate ([8,9,1]) == 9\n"}
{"task_id": "425", "ori_task_id": 808, "prompt": "Write a function to check if the given tuples contain the k or not.\nThe function signature is: check_K(test_tup, K)\n", "entry_point": "check_K", "test": "\ndef check(candidate):\n    assert candidate((10, 4, 5, 6, 8), 6) == True\n    assert candidate((1, 2, 3, 4, 5, 6), 7) == False\n    assert candidate((7, 8, 9, 44, 11, 12), 11) == True\n"}
{"task_id": "426", "ori_task_id": 809, "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nThe function signature is: check_smaller(test_tup1, test_tup2)\n", "entry_point": "check_smaller", "test": "\ndef check(candidate):\n    assert candidate((1, 2, 3), (2, 3, 4)) == False\n    assert candidate((4, 5, 6), (3, 4, 5)) == True\n    assert candidate((11, 12, 13), (10, 11, 12)) == True\n"}
